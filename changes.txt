diff --git a/.env b/.env
index 514aeeb..c215b44 100644
--- a/.env
+++ b/.env
@@ -1,11 +1,13 @@
-VITE_API_URL=http://localhost:8000/api
+VITE_API_URL=hhttp://22.32.245.79:8449/api/v1
 VITE_CMS_URL=http://22.32.245.79:8449/api/v1
 
 VITE_APP_NAME=NBC Site
 VITE_WEBSOCKET_URL=ws://localhost:3000/ws
 VITE_BASE_URL=/
 
-
+# OAuth Configuration
+VITE_CLIENT_ID=frontend
+VITE_CLIENT_SECRET=sPooFEfBVqX9UDm6NY6jk
 
 # Docker Configuration
 DEV_PORT=5173
diff --git a/.env.development b/.env.development
index 3865ac9..84199ec 100644
--- a/.env.development
+++ b/.env.development
@@ -5,7 +5,7 @@ NODE_ENV=development
 
 # Vite Configuration
 VITE_APP_NAME=Corporate Website
-VITE_API_URL=http://localhost:8000
+VITE_API_URL=http://22.32.245.79:8449/api/v1
 VITE_ENV=development
 VITE_BASE_URL=/
 
diff --git a/src/Page-Sections/Landing/AboutPageSection/Parts/MissionVision.tsx b/src/Page-Sections/Landing/AboutPageSection/Parts/MissionVision.tsx
index a8e14c5..681caeb 100644
--- a/src/Page-Sections/Landing/AboutPageSection/Parts/MissionVision.tsx
+++ b/src/Page-Sections/Landing/AboutPageSection/Parts/MissionVision.tsx
@@ -3,14 +3,14 @@ import WhyYouShouldSection from "@/components/sections/WhyYouShouldSection";
 function MissionVision() {
   const missionVision = [
     {
-      icon: "/images/dynamic-website.svg",
-      title: "Vision",
+      icon: "/images/static-website.svg",
+      title: "Purpose",
       description:
         "It is well recognized that component of interaction design is an essential part of user UX",
     },
     {
-      icon: "/images/static-website.svg",
-      title: "Mission",
+      icon: "/images/interaction-design.svg",
+      title: "Value",
       description:
         "To enable a pleasurable and desirable end user experience, the following",
     },
@@ -20,12 +20,12 @@ function MissionVision() {
     //   description:
     //     "Usability is attached with all tools used by humans and is extended to both digital ",
     // },
-    {
-      icon: "/images/interaction-design.svg",
-      title: "Values",
-      description:
-        "The goal of interaction design is to create a product that produces an efficient ",
-    },
+    // {
+    //   icon: "/images/interaction-design.svg",
+    //   title: "Values",
+    //   description:
+    //     "The goal of interaction design is to create a product that produces an efficient ",
+    // },
   ];
 
   return (
diff --git a/src/Page-Sections/Landing/AboutPageSection/sections/OverviewPageSection.tsx b/src/Page-Sections/Landing/AboutPageSection/sections/OverviewPageSection.tsx
index b484240..59483db 100644
--- a/src/Page-Sections/Landing/AboutPageSection/sections/OverviewPageSection.tsx
+++ b/src/Page-Sections/Landing/AboutPageSection/sections/OverviewPageSection.tsx
@@ -40,7 +40,6 @@ function OverviewPageSection() {
         <HeadingPart
           title="Our History"
           subtitle={`A visual guide could be a wireframe, creative composition, or information architecture. A device that enables collaboration will lessen the chance of work having to be completely redone. A manager could create a visual guide for the team to complete the build-out.\n
-A visual guide could be a wireframe, creative composition, or information architecture. A device that enables collaboration will lessen the chance of work having to be completely redone. A manager could create a visual guide for the team to complete the build-out.A visual guide could be a wireframe, creative composition, or information architecture. A device that enables collaboration will lessen the chance of work having to be completely redone. A manager could create a visual guide for the team to complete the build-out.\n
 A visual guide could be a wireframe, creative composition, or information architecture. A device that enables collaboration will lessen the chance of work having to be completely redone. A manager could create a visual guide for the team to complete the build-out.A visual guide could be a wireframe, creative composition, or information architecture. A device that enables collaboration will lessen the chance of work having to be completely redone. A manager could create a visual guide for the team to complete the build-out.`}
         />
       </div>
diff --git a/src/Page-Sections/UserDashboardPageSection/DashboadSections/InsuranceSections/Tabs/InsuranceApplication.tsx b/src/Page-Sections/UserDashboardPageSection/DashboadSections/InsuranceSections/Tabs/InsuranceApplication.tsx
index 56f429e..ca0ee9c 100644
--- a/src/Page-Sections/UserDashboardPageSection/DashboadSections/InsuranceSections/Tabs/InsuranceApplication.tsx
+++ b/src/Page-Sections/UserDashboardPageSection/DashboadSections/InsuranceSections/Tabs/InsuranceApplication.tsx
@@ -69,7 +69,7 @@ function InsuranceApplication() {
   };
 
   return (
-    <div className="border border-gray-300 rounded-lg p-4 sm:p-6 bg-white space-y-4">
+    <div className="border border-gray-300 rounded-lg p-4 sm:p-6 bg-white space-y-4">     
       <div>
         <h2 className="text-md font-semibold text-gray-400">
           Insurance Application
diff --git a/src/Pages/error/NotFound.tsx b/src/Pages/error/NotFound.tsx
index 30e86a7..23c58f8 100644
--- a/src/Pages/error/NotFound.tsx
+++ b/src/Pages/error/NotFound.tsx
@@ -1,19 +1,97 @@
+import Button from "@/components/ui/button";
+import { ArrowLeft, Home } from "lucide-react";
 import React from "react";
+import { useNavigate } from "react-router-dom";
+
+const NotFound: React.FC = () => {
+const navigate = useNavigate();
+
+  const currentYear = new Date().getFullYear();
+
+  return (
+    <section className="relative min-h-screen flex items-center justify-center bg-[linear-gradient(180deg,hsl(240_10%_3.9%),hsl(240_8%_6%))] overflow-hidden">
+      {/* Animated background glow */}
+      <div className="absolute inset-0 bg-gradient-glow animate-glow-pulse" />
+
+      {/* Floating orbs */}
+      <div
+        className="absolute top-1/4 left-1/4 w-32 h-32 bg-[linear-gradient(135deg,#04392B,#E43B43)] rounded-full opacity-20 animate-float"
+        style={{ animationDelay: "0s" }}
+      />
+      <div
+        className="absolute top-1/3 right-1/4 w-24 h-24 bg-[linear-gradient(135deg,#04392B,#E43B43)] rounded-full opacity-15 animate-float"
+        style={{ animationDelay: "2s" }}
+      />
+      <div
+        className="absolute bottom-1/3 left-1/3 w-20 h-20 bg-[linear-gradient(135deg,#04392B,#E43B43)] rounded-full opacity-25 animate-float"
+        style={{ animationDelay: "1s" }}
+      />
+
+      <div className="relative z-10 container mx-auto px-4 text-center">
+        <div className="animate-fade-in">
+          <h1 className="text-6xl md:text-8xl font-bold mb-6 bg-[linear-gradient(135deg,#04392B,#E43B43)] bg-clip-text text-transparent leading-tight">
+            Coming Soon
+          </h1>
+
+          <p className="text-xl md:text-2xl text-muted-foreground mb-8 max-w-2xl mx-auto leading-relaxed">
+            We&apos;re building something incredible. Be the first to experience
+            the future.
+          </p>
+
+          {/* <form onSubmit={handleSubmit} className="flex flex-col sm:flex-row gap-4 max-w-md mx-auto mb-8">
+            <Input
+              type="email"
+              placeholder="Enter your email"
+              value={email}
+              onChange={(e) => setEmail(e.target.value)}
+              className="flex-1 bg-secondary/50 border-border/50 backdrop-blur-sm"
+              required
+            />
+            <Button 
+              type="submit" 
+              className="bg-[linear-gradient(135deg,#04392B,#E43B43)] hover:shadow-glow-primary transition-all duration-300 font-medium"
+            >
+              Notify Me
+            </Button>
+          </form>
+           */}
+          <div className="flex items-center justify-center gap-8 text-sm text-muted-foreground">
+            <span className="flex items-center gap-2">
+              <div className="w-2 h-2 bg-[linear-gradient(135deg,#04392B,#E43B43)] rounded-full animate-glow-pulse" />
+              Modern Design
+            </span>
+            <span className="flex items-center gap-2">
+              <div className="w-2 h-2 bg-[linear-gradient(135deg,#04392B,#E43B43)] rounded-full animate-glow-pulse" />
+              Fast & Secure
+            </span>
+            <span className="flex items-center gap-2">
+              <div className="w-2 h-2 bg-[linear-gradient(135deg,#04392B,#E43B43)] rounded-full animate-glow-pulse" />
+              Coming {currentYear}
+            </span>
+          </div>
+          <div className="flex justify-center mt-10 gap-5">
+            <Button
+              className="group transition-all duration-200 transform hover:scale-105"
+              onClick={() => navigate(-1)}
+            >
+              <ArrowLeft className="" />
+              Go Back
+            </Button>
+
+            <Button
+              className="group transition-all duration-200 transform hover:scale-105"
+              onClick={() => navigate('/')}
+            >
+              <Home />
+              Go Home
+            </Button>
+          </div>
+        </div>
+      </div>
+    </section>
+  );
+}
+ 
 
-const NotFound: React.FC = () => (
-  <div style={{ textAlign: "center", padding: "4rem 1rem" }}>
-    <h1>404 - Page Not Found</h1>
-    <p>The page you are looking for does not exist.</p>
-    <a href="/" style={{
-      display: "inline-block",
-      marginTop: "2rem",
-      padding: "0.75rem 2rem",
-      background: "#007bff",
-      color: "#fff",
-      borderRadius: "4px",
-      textDecoration: "none"
-    }}>Go Home</a>
-  </div>
-);
 
 export default NotFound; 
\ No newline at end of file
diff --git a/src/Routes/StatusRoutes.tsx b/src/Routes/StatusRoutes.tsx
index 2a5f807..d0d13d2 100644
--- a/src/Routes/StatusRoutes.tsx
+++ b/src/Routes/StatusRoutes.tsx
@@ -3,7 +3,7 @@ import { Route } from "react-router-dom";
 
 // Lazy Loading Status Pages
 const SignUp = lazy(() => import("@/Pages/Dashboard/User/Auth/SignUp"));
-const NotFound = lazy(() => import("@/Pages/Status/NotFound"));
+const NotFound = lazy(() => import("@/Pages/error/NotFound"));
 const Error = lazy(() => import("@/Pages/Status/Error"));
 const UnderMaintenance = lazy(() => import("@/Pages/Status/UnderMaintenance"));
 
diff --git a/src/components/reusable/HeroSection.tsx b/src/components/reusable/HeroSection.tsx
index 2ae738e..63c69d2 100644
--- a/src/components/reusable/HeroSection.tsx
+++ b/src/components/reusable/HeroSection.tsx
@@ -10,7 +10,8 @@ import { cn } from "@/lib/utils";
 import type { EmblaCarouselType } from "embla-carousel";
 import useCarousel, { CarouselContext } from "@/Context/CorouselContext";
 import { motion } from "framer-motion";
-import { useNavigate } from "react-router-dom";
+import { fXExchangeRateService } from "@/services/fx-exchange-rate.service";
+import { ForexMarquee } from "./ForexMarquee";
 
 type Slide = {
   title: string;
@@ -51,6 +52,21 @@ function CarouselDots() {
   );
 }
 
+interface ForexRateI {
+  currencyCode: string;
+  currencyName: string;
+  buyingCashRate: number;
+  buyingTransferRate: number;
+  sellingCashRate: number;
+  sellingTransferRate: number;
+}
+
+interface ForexRatesResponseI {
+  success: boolean;
+  exchangeRates: ForexRateI[];
+  lastUpdated: string;
+}
+
 function HeroSection({
   slides,
   hasForex = true,
@@ -58,45 +74,21 @@ function HeroSection({
 }: HeroSectionProps) {
   const [api, setApi] = useState<EmblaCarouselType | null>(null);
   const [selected, setSelected] = useState(0);
-  const navigate = useNavigate();
-
-  const forexRates = [
-    {
-      currency: "SEK",
-      buy: 2257,
-      sell: 2367,
-      code: "SEK",
-      image: "/images/asset7.webp",
-    },
-    {
-      currency: "OMR",
-      buy: 1905,
-      sell: 1915,
-      code: "OMR",
-      image: "/images/asset11.webp",
-    },
-    {
-      currency: "ZMK",
-      buy: 1,
-      sell: 1,
-      code: "ZMK",
-      image: "/images/asset8.webp",
-    },
-    {
-      currency: "INR",
-      buy: 255,
-      sell: 365,
-      code: "INR",
-      image: "/images/asset10.webp",
-    },
-    {
-      currency: "ZWD",
-      buy: 255,
-      sell: 365,
-      code: "ZWD",
-      image: "/images/asset9.webp",
-    },
-  ];
+  const [forexRates, setForexRates] = useState<ForexRatesResponseI | undefined>(undefined);
+
+
+  const getForexRates = async () => {
+    await fXExchangeRateService.getExchangeRates(setForexRates);
+  };
+
+  useEffect(() => {
+    if (hasForex) {
+      getForexRates();
+    }
+  }, [hasForex]);
+  console.log(forexRates);
+
+
 
   // Update selected slide index
   useEffect(() => {
@@ -184,57 +176,7 @@ function HeroSection({
           {slides.length > 1 && <CarouselDots />}
         </CarouselContext.Provider>
       </Carousel>
-      {hasForex && (
-        <div className="bg-nbc-dark-700 text-white">
-          <div className="container px-4 py-3 mx-auto">
-            <div className="flex justify-center items-center md:justify-between">
-              <div className="overflow-hidden relative flex-1">
-                <div
-                  className="flex whitespace-nowrap animate-marquee"
-                  style={{ animation: "marquee 18s linear infinite" }}
-                >
-                  {[...forexRates, ...forexRates].map((rate, index, arr) => (
-                    <div
-                      key={rate.code + "-" + index}
-                      className={
-                        `flex items-center gap-2 text-sm px-6 h-10 text-white` +
-                        (index === arr.length - 1 ? " mr-8" : "")
-                      }
-                      style={{ minWidth: "300px" }}
-                    >
-                      <span className="font-bold text-crdb-green-600">
-                        {rate.code}:
-                      </span>
-                      <span className="ml-2">
-                        Buying{" "}
-                        <span className="text-green-500 font-bold">
-                          {" "}
-                          {rate.buy}
-                        </span>{" "}
-                        - Selling
-                        <span className="text-red-500 font-bold">
-                          {" "}
-                          {rate.sell}
-                        </span>
-                      </span>
-                    </div>
-                  ))}
-                </div>
-              </div>
-              <div className="flex justify-center md:block">
-                <Button
-                  className="ml-5 bg-white text-[#213A89] py-2 hover:bg-white cursor-pointer font-[600]"
-                  onClick={() => {
-                    navigate("/currency-convetor");
-                  }}
-                >
-                  Currency Calculator
-                </Button>
-              </div>
-            </div>
-          </div>
-        </div>
-      )}
+      {hasForex && forexRates && <ForexMarquee forexRates={forexRates.exchangeRates} />}
     </>
   );
 }
diff --git a/src/components/sections/ContactForm.tsx b/src/components/sections/ContactForm.tsx
index e7ff30e..a0f1fe5 100644
--- a/src/components/sections/ContactForm.tsx
+++ b/src/components/sections/ContactForm.tsx
@@ -1,135 +1,182 @@
 import { useState } from "react";
 import Button from "../ui/button";
+import { CustomSelect } from "../ui/CustomSelect";
 
 type LoadingStates = {
   submit?: boolean;
   [key: string]: boolean | undefined;
 };
 
-function ContactForm ()  {
-    const [loadingStates] = useState<LoadingStates>({});
-    const [formData, setFormData] = useState({
-      firstName: '',
-      lastName: '',
-      phone: '',
-      email: '',
-      message: ''
-    });
-  
-    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
-      const { name, value } = e.target;
-      setFormData(prev => ({
-        ...prev,
-        [name]: value
-      }));
-    };
-  
-    const handleSubmit = () => {
-      console.log('Form submitted:', formData);
-      // Handle form submission logic here
-      alert('Form submitted successfully!');
-    };
-  
-    return (
-      <div className="space-y-4">
-        {/* First Name and Last Name */}
-        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
-          <div>
-            <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-1">
-              First Name
-            </label>
-            <input
-              type="text"
-              id="firstName"
-              name="firstName"
-              value={formData.firstName}
-              onChange={handleInputChange}
-              placeholder="Enter your first name"
-              className="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 hover:border-blue-300"
-            />
-          </div>
-          <div>
-            <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 mb-1">
-              Last Name
-            </label>
-            <input
-              type="text"
-              id="lastName"
-              name="lastName"
-              value={formData.lastName}
-              onChange={handleInputChange}
-              placeholder="Enter your last name"
-              className="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 hover:border-blue-300"
-            />
-          </div>
-        </div>
-  
-        {/* Phone Number */}
+function ContactForm() {
+  const [loadingStates] = useState<LoadingStates>({});
+  const [formData, setFormData] = useState({
+    firstName: "",
+    lastName: "",
+    phone: "",
+    email: "",
+    message: "",
+  });
+
+  const handleInputChange = (
+    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
+  ) => {
+    const { name, value } = e.target;
+    setFormData((prev) => ({
+      ...prev,
+      [name]: value,
+    }));
+  };
+
+  const handleSubmit = () => {
+    console.log("Form submitted:", formData);
+    // Handle form submission logic here
+    alert("Form submitted successfully!");
+  };
+
+  return (
+    <div className="space-y-4">
+      {/* First Name and Last Name */}
+      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
         <div>
-          <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">
-            Phone Number
+          <label
+            htmlFor="firstName"
+            className="block text-sm font-medium text-gray-700 mb-1"
+          >
+            First Name
           </label>
-          <div className="flex">
-            <select className="px-3 py-2.5 border border-gray-300 rounded-l-lg bg-gray-50 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300">
-              <option>TZ (+255)</option>
-            </select>
-            <input
-              type="tel"
-              id="phone"
-              name="phone"
-              value={formData.phone}
-              onChange={handleInputChange}
-              placeholder="Phone number"
-              className="flex-1 px-3 py-2.5 border border-l-0 border-gray-300 rounded-r-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 hover:border-blue-300"
-            />
-          </div>
+          <input
+            type="text"
+            id="firstName"
+            name="firstName"
+            value={formData.firstName}
+            onChange={handleInputChange}
+            placeholder="Enter your first name"
+            className="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 hover:border-blue-300"
+          />
         </div>
-  
-        {/* Email */}
         <div>
-          <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
-            Email
+          <label
+            htmlFor="lastName"
+            className="block text-sm font-medium text-gray-700 mb-1"
+          >
+            Last Name
           </label>
           <input
-            type="email"
-            id="email"
-            name="email"
-            value={formData.email}
+            type="text"
+            id="lastName"
+            name="lastName"
+            value={formData.lastName}
             onChange={handleInputChange}
-            placeholder="Enter your email"
+            placeholder="Enter your last name"
             className="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 hover:border-blue-300"
           />
         </div>
-  
-        {/* Subject/Message */}
-        <div>
-          <label htmlFor="message" className="block text-sm font-medium text-gray-700 mb-1">
-            Subject/Message
-          </label>
-          <textarea
-            id="message"
-            name="message"
-            value={formData.message}
+      </div>
+
+      {/* Phone Number */}
+      <div>
+        <label
+          htmlFor="phone"
+          className="block text-sm font-medium text-gray-700 mb-1"
+        >
+          Phone Number
+        </label>
+        <div className="flex">
+          <select className="px-3 py-2.5 border border-gray-300 rounded-l-lg bg-gray-50 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300">
+            <option>TZ (+255)</option>
+          </select>
+          <input
+            type="tel"
+            id="phone"
+            name="phone"
+            value={formData.phone}
             onChange={handleInputChange}
-            placeholder="Type your message here"
-            rows={4}
-            className="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none transition-all duration-300 hover:border-blue-300"
+            placeholder="Phone number"
+            className="flex-1 px-3 py-2.5 border border-l-0 border-gray-300 rounded-r-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 hover:border-blue-300"
           />
         </div>
-  
-        {/* Submit Button */}
+      </div>
+
+      {/* Email */}
+      <div>
+        <label
+          htmlFor="email"
+          className="block text-sm font-medium text-gray-700 mb-1"
+        >
+          Email
+        </label>
+        <input
+          type="email"
+          id="email"
+          name="email"
+          value={formData.email}
+          onChange={handleInputChange}
+          placeholder="Enter your email"
+          className="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 hover:border-blue-300"
+        />
+      </div>
+
+      <CustomSelect
+        options={[
+          {
+            label: "General Inquiry",
+            value: "general_inquiry",
+          },
+          {
+            label: "Support",
+            value: "support",
+          },
+          {
+            label: "Feedback",
+            value: "feedback",
+          },
+        ]}
+        onValueChange={(value) => {
+          console.log(value);
+        }}
+        label="Request Category"
+        value={""}
+        placeholder="Choose category"
+        className="w-full"
+      />
 
-        <Button variant="primary" onClick={handleSubmit} className="w-full" loading={loadingStates['submit']}>
+      {/* Subject/Message */}
+      <div>
+        <label
+          htmlFor="message"
+          className="block text-sm font-medium text-gray-700 mb-1"
+        >
+          Subject/Message
+        </label>
+        <textarea
+          id="message"
+          name="message"
+          value={formData.message}
+          onChange={handleInputChange}
+          placeholder="Type your message here"
+          rows={4}
+          className="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none transition-all duration-300 hover:border-blue-300"
+        />
+      </div>
+
+      {/* Submit Button */}
+
+      <Button
+        variant="primary"
+        onClick={handleSubmit}
+        className="w-full"
+        loading={loadingStates["submit"]}
+      >
         Submit Request
-        </Button>
-        {/* <button
+      </Button>
+      {/* <button
           onClick={handleSubmit}
           className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white py-3 px-6 rounded-xl  focus:outline-none focus:ring-2  focus:ring-offset-2 transition-all duration-300 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105 active:scale-95"
         >
        
         </button> */}
-      </div>
-    );
-  };
-  
-  export default ContactForm
\ No newline at end of file
+    </div>
+  );
+}
+
+export default ContactForm;
diff --git a/src/components/sections/WhyYouShouldSection.tsx b/src/components/sections/WhyYouShouldSection.tsx
index 044a4f6..319dd30 100644
--- a/src/components/sections/WhyYouShouldSection.tsx
+++ b/src/components/sections/WhyYouShouldSection.tsx
@@ -66,7 +66,7 @@ function WhyYouShouldSection({
         
         {/* Items Grid */}
         <div className="max-w-7xl mx-auto w-full">
-          <div className={`grid grid-cols-1 sm:grid-cols-2  gap-6 sm:gap-8 lg:gap-12 xl:gap-14 px-4 sm:px-6 lg:px-8 ${items.length > 3 ? 'lg:grid-cols-4' : 'lg:grid-cols-3'}`}>
+          <div className={`grid grid-cols-1 sm:grid-cols-2 gap-6 sm:gap-8 lg:gap-12 xl:gap-14 px-4 sm:px-6 lg:px-8 ${items.length === 2 ? 'lg:grid-cols-2' : items.length > 3 ? 'lg:grid-cols-4' : 'lg:grid-cols-3'}`}>
             {items.map((item, index) => (
               <div 
                 className="flex flex-col items-center text-center space-y-4 sm:space-y-5" 
diff --git a/src/index.css b/src/index.css
index e32e5e6..2c1180d 100644
--- a/src/index.css
+++ b/src/index.css
@@ -100,6 +100,13 @@
   --sale-badge: 120 100% 40%;
   --best-deals-badge: 45 100% 51%;
   --discount-badge: 220 50% 47%;
+
+
+  --forex-dark: 220 20% 12%;
+  --forex-green: 142 71% 45%;
+  --forex-red: 0 84% 55%;
+  --forex-accent: 213 89% 50%;
+  --forex-muted: 215 16% 47%;
 }
 
 body {
@@ -188,6 +195,72 @@ body {
   }
 }
 
+
+
+
+
+@layer utilities {
+  /* Forex Marquee Animation */
+  @keyframes marquee {
+    0% {
+      transform: translateX(100%);
+    }
+    100% {
+      transform: translateX(-100%);
+    }
+  }
+  
+  .animate-marquee {
+    animation: marquee 20s linear infinite;
+  }
+  
+  /* Forex Rate Components */
+  .forex-rate-item {
+    display: flex;
+    align-items: center;
+    gap: 1.5rem;
+    font-size: 0.875rem;
+    padding-left: 2rem;
+    padding-right: 2rem;
+    padding-top: 0.75rem;
+    padding-bottom: 0.75rem;
+    min-width: max-content;
+    white-space: nowrap;
+  }
+  
+  .forex-currency {
+    font-weight: 700;
+    font-size: 1rem;
+    color: hsl(var(--forex-accent));
+  }
+  
+  .forex-rate-group {
+    display: flex;
+    align-items: center;
+    gap: 2rem;
+  }
+  
+  .forex-rate-label {
+    font-size: 0.875rem;
+    font-weight: 500;
+    color: hsl(var(--forex-muted));
+  }
+  
+  .forex-rate-value {
+    font-weight: 700;
+    font-size: 1rem;
+    margin-left: 0.5rem;
+  }
+  
+  .forex-rate-buy {
+    color: hsl(var(--forex-green));
+  }
+  
+  .forex-rate-sell {
+    color: hsl(var(--forex-red));
+  }
+}
+
 /* Remove red border ring on focus for all elements */
 :focus-visible,
 .focus-visible,
diff --git a/src/services/Api.service.ts b/src/services/Api.service.ts
index e1319bb..e934a0d 100644
--- a/src/services/Api.service.ts
+++ b/src/services/Api.service.ts
@@ -7,12 +7,41 @@ import axios, {
   type AxiosResponse,
 } from "axios";
 
+// Updated interface to match your new response structure
+interface TokenResponse {
+  accessToken: string;
+  tokenType: string;
+  expiresAt: string; // ISO date string
+  scope: string;
+}
+
+interface AuthCredentials {
+  clientId: string;
+  clientSecret: string;
+}
+
 export class ApiService {
   private axiosInstance: AxiosInstance;
   private readonly PRECONDITION_FAILED = 428;
   private readonly STATUS_ERROR_THRESHOLD = 300;
   private loginRoute: string;
 
+  // Authentication related properties
+  private authCredentials: AuthCredentials | null = null;
+  private tokenRefreshPromise: Promise<string> | null = null;
+  private refreshTimer: NodeJS.Timeout | null = null;
+  private isInitializing = false;
+
+  // Request queue for handling concurrent requests during token refresh
+  private isRefreshing = false;
+  private failedQueue: Array<{
+    resolve: (token: string) => void;
+    reject: (error: any) => void;
+  }> = [];
+
+  // Request deduplication
+  private pendingRequests = new Map<string, Promise<any>>();
+
   constructor(baseURL: string, loginRoute: string = "/login") {
     this.axiosInstance = axios.create({
       baseURL,
@@ -24,10 +53,13 @@ export class ApiService {
     });
 
     this.loginRoute = loginRoute;
+    this.loadCredentials();
     this.setupInterceptors();
 
-    // Initialize token immediately after setup
-    this.initializeAuthToken();
+    // Initialize authentication only if VITE_API_URL is present
+    if (import.meta.env.VITE_API_URL) {
+      this.initializeAuthentication();
+    }
 
     // Make this instance globally available for token sync
     if (typeof window !== "undefined") {
@@ -35,82 +67,346 @@ export class ApiService {
     }
   }
 
-  // Add this method to initialize token on service creation
-  private initializeAuthToken(): void {
+  /**
+   * Load credentials from environment variables (secure approach)
+   * In production, these should be injected securely at build time
+   */
+  private loadCredentials(): void {
+    const clientId = import.meta.env.VITE_CLIENT_ID;
+    const clientSecret = import.meta.env.VITE_CLIENT_SECRET;
+
+    if (clientId && clientSecret) {
+      this.authCredentials = { clientId, clientSecret };
+    } else {
+      console.warn("Client credentials not found in environment variables");
+    }
+  }
+
+  /**
+   * Get stored token from localStorage or cookie
+   */
+  private getStoredToken(): { token: string | null; expiry: number | null } {
+    // Try localStorage first
     const token = localStorage.getItem("accessToken");
-    if (token) {
-      // Set the authorization header immediately
+    const tokenExpiry = localStorage.getItem("tokenExpiry");
+    
+    if (token && tokenExpiry) {
+      return { 
+        token, 
+        expiry: parseInt(tokenExpiry) 
+      };
+    }
+
+    // Fallback to cookie if localStorage is not available
+    if (typeof document !== 'undefined') {
+      const cookieToken = this.getCookie("accessToken");
+      const cookieExpiry = this.getCookie("tokenExpiry");
+      
+      if (cookieToken && cookieExpiry) {
+        return { 
+          token: cookieToken, 
+          expiry: parseInt(cookieExpiry) 
+        };
+      }
+    }
+
+    return { token: null, expiry: null };
+  }
+
+  /**
+   * Store token in both localStorage and cookie for redundancy
+   */
+  private storeToken(token: string, expiryTime: number): void {
+    try {
+      // Store in localStorage
+      localStorage.setItem("accessToken", token);
+      localStorage.setItem("tokenExpiry", expiryTime.toString());
+    } catch (_error) {
+      console.warn("localStorage not available, using cookies only");
+    }
+
+    // Also store in cookie as backup
+    if (typeof document !== 'undefined') {
+      const expiryDate = new Date(expiryTime);
+      this.setCookie("accessToken", token, expiryDate);
+      this.setCookie("tokenExpiry", expiryTime.toString(), expiryDate);
+    }
+  }
+
+  /**
+   * Clear token from both localStorage and cookie
+   */
+  private clearStoredToken(): void {
+    try {
+      localStorage.removeItem("accessToken");
+      localStorage.removeItem("tokenExpiry");
+    } catch (error) {
+      console.warn("Failed to clear stored token:", error);
+    }
+
+    // Also clear cookies
+    if (typeof document !== 'undefined') {
+      this.deleteCookie("accessToken");
+      this.deleteCookie("tokenExpiry");
+    }
+  }
+
+  /**
+   * Cookie utility methods
+   */
+  private setCookie(name: string, value: string, expires: Date): void {
+    document.cookie = `${name}=${value}; expires=${expires.toUTCString()}; path=/; secure; samesite=strict`;
+  }
+
+  private getCookie(name: string): string | null {
+    const nameEQ = name + "=";
+    const ca = document.cookie.split(';');
+    for (let i = 0; i < ca.length; i++) {
+      let c = ca[i];
+      while (c.charAt(0) === ' ') c = c.substring(1, c.length);
+      if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
+    }
+    return null;
+  }
+
+  private deleteCookie(name: string): void {
+    document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
+  }
+
+  /**
+   * Initialize authentication on app start - only fetch token if none exists
+   */
+  private async initializeAuthentication(): Promise<void> {
+    if (this.isInitializing || !this.authCredentials) return;
+
+    this.isInitializing = true;
+
+    try {
+      // Check if we have a valid token first
+      const { token: existingToken, expiry: tokenExpiry } = this.getStoredToken();
+
+      if (existingToken && tokenExpiry) {
+        const now = Date.now();
+
+        // If token expires in more than 5 minutes, use it
+        if (tokenExpiry > now + 300000) {
+          this.setAuthToken(existingToken);
+          this.scheduleTokenRefresh(tokenExpiry - now);
+          console.log("Using existing valid token");
+          return;
+        }
+      }
+
+      // Only fetch new token if no valid token exists
+      console.log("No valid token found, fetching new token...");
+      await this.refreshAuthToken();
+    } catch (error) {
+      console.error("Failed to initialize authentication:", error);
+      // Don't redirect on initial auth failure, just log it
+    } finally {
+      this.isInitializing = false;
+    }
+  }
+
+  /**
+   * Get authentication token from backend - updated for new response format
+   */
+  private async getAuthToken(): Promise<TokenResponse> {
+    if (!this.authCredentials) {
+      throw new Error("Authentication credentials not configured");
+    }
+
+    if (!import.meta.env.VITE_API_URL) {
+      throw new Error("API URL not configured");
+    }
+
+    try {
+      // Create a separate axios instance for auth to avoid interceptors
+      const authInstance = axios.create({
+        baseURL: import.meta.env.VITE_API_URL,
+        timeout: 30000,
+        headers: {
+          "Content-Type": "application/json",
+        },
+      });
+
+      const response = await authInstance.post<TokenResponse>("/auth/token", {
+        clientId: this.authCredentials.clientId,
+        clientSecret: this.authCredentials.clientSecret,
+      });
+
+      return response.data;
+    } catch (error) {
+      console.error("Failed to get auth token:", error);
+      throw error;
+    }
+  }
+
+  /**
+   * Process the failed request queue
+   */
+  private processQueue(error: any, token: string | null = null): void {
+    this.failedQueue.forEach(({ resolve, reject }) => {
+      if (error) {
+        reject(error);
+      } else {
+        resolve(token!);
+      }
+    });
+
+    this.failedQueue = [];
+  }
+
+  /**
+   * Refresh the authentication token
+   */
+  private async refreshAuthToken(): Promise<string> {
+    // Prevent multiple concurrent refresh attempts
+    if (this.tokenRefreshPromise) {
+      return this.tokenRefreshPromise;
+    }
+
+    this.tokenRefreshPromise = this.performTokenRefresh();
+
+    try {
+      return await this.tokenRefreshPromise;
+    } finally {
+      this.tokenRefreshPromise = null;
+    }
+  }
+
+  /**
+   * Perform the actual token refresh - updated for new response format
+   */
+  private async performTokenRefresh(): Promise<string> {
+    try {
+      const tokenData = await this.getAuthToken();
+      const token = tokenData.accessToken; // Updated field name
+
+      // Parse the expiresAt date string and calculate expiry time
+      const expiresAtDate = new Date(tokenData.expiresAt);
+      const expiryTime = expiresAtDate.getTime();
+      
+      // Calculate buffer time (5 minutes before actual expiry for safety)
+      const bufferTime = 5 * 60 * 1000; // 5 minutes in milliseconds
+      const refreshTime = expiryTime - bufferTime;
+
+      // Store token and expiry in both localStorage and cookie
+      this.storeToken(token, expiryTime);
+
+      // Set authorization header
       this.axiosInstance.defaults.headers.common[
         "Authorization"
-      ] = `Bearer ${token}`;
+      ] = `${tokenData.tokenType} ${token}`; // Use tokenType from response
+
+      // Schedule next refresh
+      const timeUntilRefresh = refreshTime - Date.now();
+      if (timeUntilRefresh > 0) {
+        this.scheduleTokenRefresh(timeUntilRefresh);
+      }
+
+      console.log(`Token refreshed successfully. Expires at: ${tokenData.expiresAt}`);
+      return token;
+    } catch (error) {
+      console.error("Token refresh failed:", error);
+      this.clearAuthToken();
+      throw error;
     }
   }
 
+  /**
+   * Schedule automatic token refresh
+   */
+  private scheduleTokenRefresh(delay: number): void {
+    if (this.refreshTimer) {
+      clearTimeout(this.refreshTimer);
+    }
+
+    if (delay > 0) {
+      this.refreshTimer = setTimeout(async () => {
+        try {
+          await this.refreshAuthToken();
+        } catch (error) {
+          console.error("Scheduled token refresh failed:", error);
+        }
+      }, delay);
+      
+      console.log(`Next token refresh scheduled in ${Math.round(delay / 1000 / 60)} minutes`);
+    }
+  }
+
+  /**
+   * Enhanced setup interceptors with automatic token inclusion
+   */
   private setupInterceptors(): void {
-    // Request interceptor
+    // Request interceptor - automatically add token to all requests
     this.axiosInstance.interceptors.request.use(
       (config) => {
-        // Always get the latest token from localStorage
-        const token = localStorage.getItem("accessToken");
-        if (token) {
-          config.headers.Authorization = `Bearer ${token}`;
-        } else {
-          // Remove authorization header if no token
-          delete config.headers.Authorization;
+        // Skip adding token for auth requests
+        if (!config.url?.includes("/auth/token")) {
+          const { token } = this.getStoredToken();
+          if (token) {
+            // Use Bearer as default token type
+            config.headers.Authorization = `Bearer ${token}`;
+          } else {
+            delete config.headers.Authorization;
+          }
         }
 
         // Add request timestamp for debugging
         config.metadata = { startTime: new Date() };
 
-        // console.log(
-        //   `🚀 ${config.method?.toUpperCase()} ${config.url}`,
-        //   config.data || config.params
-        // );
-
         return config;
       },
       (error) => {
-        // console.error("❌ Request Error:", error);
         return Promise.reject(error);
       }
     );
 
-    // Response interceptor
+    // Enhanced response interceptor with request queuing
     this.axiosInstance.interceptors.response.use(
       (response: AxiosResponse) => {
-        // const startTime = response.config?.metadata?.startTime;
-        // const duration = startTime
-        //   ? new Date().getTime() - startTime.getTime()
-        //   : 0;
-
-        // console.log(
-        //   `✅ ${response.config.method?.toUpperCase()} ${
-        //     response.config.url
-        //   } (${duration}ms)`,
-        //   response.data
-        // );
-
         return response;
       },
-      (error: AxiosError) => {
-        // const startTime = error.config?.metadata?.startTime;
-        // const duration = startTime
-        //   ? new Date().getTime() - startTime.getTime()
-        //   : 0;
-
-        // console.error(
-        //   `❌ ${error.config?.method?.toUpperCase()} ${
-        //     error.config?.url
-        //   } (${duration}ms)`,
-        //   error.response?.data || error.message
-        // );
+      async (error: AxiosError) => {
+        const originalRequest = error.config as any;
 
         // Handle token expiration
-        if (error.response?.status === 401) {
-          localStorage.removeItem("accessToken");
-          // Clear authorization header
-          delete this.axiosInstance.defaults.headers.common["Authorization"];
-          window.location.href = this.loginRoute;
+        if (error.response?.status === 401 && !originalRequest._retry) {
+          if (this.isRefreshing) {
+            // If we're already refreshing, queue this request
+            return new Promise((resolve, reject) => {
+              this.failedQueue.push({ resolve, reject });
+            })
+              .then((token) => {
+                originalRequest.headers.Authorization = `Bearer ${token}`;
+                return this.axiosInstance(originalRequest);
+              })
+              .catch((err) => {
+                return Promise.reject(err);
+              });
+          }
+
+          originalRequest._retry = true;
+          this.isRefreshing = true;
+
+          return new Promise((resolve, reject) => {
+            this.refreshAuthToken()
+              .then((newToken) => {
+                originalRequest.headers.Authorization = `Bearer ${newToken}`;
+                this.processQueue(null, newToken);
+                resolve(this.axiosInstance(originalRequest));
+              })
+              .catch((err) => {
+                this.processQueue(err, null);
+                this.clearAuthToken();
+                window.location.href = this.loginRoute;
+                reject(err);
+              })
+              .finally(() => {
+                this.isRefreshing = false;
+              });
+          });
         }
 
         return Promise.reject(error);
@@ -118,6 +414,14 @@ export class ApiService {
     );
   }
 
+  /**
+   * Generate a unique key for request deduplication
+   */
+  private generateRequestKey(method: string, url: string, data?: any): string {
+    const dataStr = data ? JSON.stringify(data) : "";
+    return `${method}:${url}:${btoa(dataStr).slice(0, 10)}`;
+  }
+
   private handleSuccess(message?: string): void {
     if (message) {
       globalMessageService.success("Success", message);
@@ -126,9 +430,7 @@ export class ApiService {
 
   private handleFailure(error: ApiError): { error: string; path?: string } {
     if (!error.response) {
-      // console.error("Network error or no response received:", error.message);
       const errorMsg = "Network error. Please check your connection.";
-
       globalMessageService.error("Network Error", errorMsg);
       return { error: errorMsg };
     }
@@ -168,7 +470,31 @@ export class ApiService {
     return { error: errorMsg };
   }
 
+  // Enhanced API methods with deduplication
   async get<T = any>(url: string, params?: any): Promise<ApiResponse<T>> {
+    const requestKey = this.generateRequestKey("GET", url, params);
+
+    // Check if the same request is already pending
+    if (this.pendingRequests.has(requestKey)) {
+      return this.pendingRequests.get(requestKey);
+    }
+
+    const requestPromise = this.performGet<T>(url, params);
+    this.pendingRequests.set(requestKey, requestPromise);
+
+    try {
+      const result = await requestPromise;
+      return result;
+    } finally {
+      // Clean up the pending request
+      this.pendingRequests.delete(requestKey);
+    }
+  }
+
+  private async performGet<T = any>(
+    url: string,
+    params?: any
+  ): Promise<ApiResponse<T>> {
     try {
       const response = await this.axiosInstance.get<ApiResponse<T>>(url, {
         params,
@@ -192,6 +518,34 @@ export class ApiService {
     url: string,
     data: any,
     config: RequestConfig = {}
+  ): Promise<ApiResponse<T>> {
+    // For POST requests, only deduplicate if explicitly requested
+    // (since POST requests often have side effects)
+    if (config.allowDeduplication) {
+      const requestKey = this.generateRequestKey("POST", url, data);
+
+      if (this.pendingRequests.has(requestKey)) {
+        return this.pendingRequests.get(requestKey);
+      }
+
+      const requestPromise = this.performPost<T>(url, data, config);
+      this.pendingRequests.set(requestKey, requestPromise);
+
+      try {
+        const result = await requestPromise;
+        return result;
+      } finally {
+        this.pendingRequests.delete(requestKey);
+      }
+    }
+
+    return this.performPost<T>(url, data, config);
+  }
+
+  private async performPost<T = any>(
+    url: string,
+    data: any,
+    config: RequestConfig = {}
   ): Promise<ApiResponse<T>> {
     try {
       const response = await this.axiosInstance.post<ApiResponse<T>>(url, data);
@@ -217,6 +571,33 @@ export class ApiService {
     url: string,
     data: any,
     config: RequestConfig = {}
+  ): Promise<ApiResponse<T>> {
+    // For PUT requests, optionally deduplicate if requested
+    if (config.allowDeduplication) {
+      const requestKey = this.generateRequestKey("PUT", url, data);
+
+      if (this.pendingRequests.has(requestKey)) {
+        return this.pendingRequests.get(requestKey);
+      }
+
+      const requestPromise = this.performPut<T>(url, data, config);
+      this.pendingRequests.set(requestKey, requestPromise);
+
+      try {
+        const result = await requestPromise;
+        return result;
+      } finally {
+        this.pendingRequests.delete(requestKey);
+      }
+    }
+
+    return this.performPut<T>(url, data, config);
+  }
+
+  private async performPut<T = any>(
+    url: string,
+    data: any,
+    config: RequestConfig = {}
   ): Promise<ApiResponse<T>> {
     try {
       const response = await this.axiosInstance.put<ApiResponse<T>>(url, data);
@@ -236,6 +617,33 @@ export class ApiService {
     url: string,
     data: any,
     config: RequestConfig = {}
+  ): Promise<ApiResponse<T>> {
+    // For PATCH requests, optionally deduplicate if requested
+    if (config.allowDeduplication) {
+      const requestKey = this.generateRequestKey("PATCH", url, data);
+
+      if (this.pendingRequests.has(requestKey)) {
+        return this.pendingRequests.get(requestKey);
+      }
+
+      const requestPromise = this.performPatch<T>(url, data, config);
+      this.pendingRequests.set(requestKey, requestPromise);
+
+      try {
+        const result = await requestPromise;
+        return result;
+      } finally {
+        this.pendingRequests.delete(requestKey);
+      }
+    }
+
+    return this.performPatch<T>(url, data, config);
+  }
+
+  private async performPatch<T = any>(
+    url: string,
+    data: any,
+    config: RequestConfig = {}
   ): Promise<ApiResponse<T>> {
     try {
       const response = await this.axiosInstance.patch<ApiResponse<T>>(
@@ -259,7 +667,6 @@ export class ApiService {
     config: RequestConfig = {}
   ): Promise<ApiResponse<T> | false> {
     try {
-      // Show confirmation dialog if required
       if (config.confirmationMessage) {
         const confirmed = await showConfirmation(
           "Confirm Deletion",
@@ -274,9 +681,7 @@ export class ApiService {
       }
 
       const response = await this.axiosInstance.delete<ApiResponse<T>>(url);
-    
 
-      // Prefer config.successMessage if provided
       if (response.status === 200) {
         this.handleSuccess(config.successMessage || response.data.message);
       } else if (config.successMessage) {
@@ -296,7 +701,6 @@ export class ApiService {
     config: RequestConfig = {}
   ): Promise<ApiResponse<T> | false> {
     try {
-      // Show confirmation dialog if required
       if (config.confirmationMessage) {
         const confirmed = await showConfirmation(
           "Confirm Action",
@@ -325,29 +729,87 @@ export class ApiService {
     }
   }
 
-  // Update setAuthToken method
-  setAuthToken(token: string): void {
-    localStorage.setItem("accessToken", token);
-    // Set the authorization header on the axios instance
-    this.axiosInstance.defaults.headers.common[
-      "Authorization"
-    ] = `Bearer ${token}`;
+  /**
+   * Manual token refresh (public method)
+   */
+  async forceRefreshToken(): Promise<void> {
+    await this.refreshAuthToken();
+  }
+
+  /**
+   * Set auth token manually (updated to handle new format)
+   */
+  setAuthToken(token: string, expiresAt?: string | Date): void {
+    let expiryTime: number;
+    
+    if (expiresAt) {
+      expiryTime = expiresAt instanceof Date ? expiresAt.getTime() : new Date(expiresAt).getTime();
+    } else {
+      // Default to 1 hour from now if no expiry provided
+      expiryTime = Date.now() + (60 * 60 * 1000);
+    }
+
+    this.storeToken(token, expiryTime);
+    this.axiosInstance.defaults.headers.common["Authorization"] = `Bearer ${token}`;
+    
+    // Schedule refresh
+    const refreshTime = expiryTime - (5 * 60 * 1000); // 5 minutes before expiry
+    const timeUntilRefresh = refreshTime - Date.now();
+    if (timeUntilRefresh > 0) {
+      this.scheduleTokenRefresh(timeUntilRefresh);
+    }
   }
 
-  // Update clearAuthToken method
+  /**
+   * Clear auth token and cancel refresh timer
+   */
   clearAuthToken(): void {
-    localStorage.removeItem("accessToken");
-    // Remove authorization header
+    this.clearStoredToken();
+
+    if (this.refreshTimer) {
+      clearTimeout(this.refreshTimer);
+      this.refreshTimer = null;
+    }
+
     delete this.axiosInstance.defaults.headers.common["Authorization"];
   }
 
-  // Get axios instance for advanced usage
+  /**
+   * Check if currently authenticated
+   */
+  isAuthenticated(): boolean {
+    const { token, expiry } = this.getStoredToken();
+
+    if (!token || !expiry) return false;
+
+    return expiry > Date.now();
+  }
+
+  /**
+   * Get axios instance for advanced usage
+   */
   getAxiosInstance(): AxiosInstance {
     return this.axiosInstance;
   }
+
+  /**
+   * Clear all pending requests (useful during cleanup)
+   */
+  clearPendingRequests(): void {
+    this.pendingRequests.clear();
+  }
+
+  /**
+   * Enhanced cleanup method to clear timers and pending requests
+   */
+  destroy(): void {
+    if (this.refreshTimer) {
+      clearTimeout(this.refreshTimer);
+      this.refreshTimer = null;
+    }
+    this.clearPendingRequests();
+    this.processQueue(new Error("Service destroyed"), null);
+  }
 }
 
-export const apiService = new ApiService(
-  import.meta.env.VITE_API_URL || "/api"
-  // Optionally pass a custom login route here, e.g. "/cms/login"
-);
+export const apiService = new ApiService(import.meta.env.VITE_API_URL);
\ No newline at end of file
diff --git a/src/types/api.ts b/src/types/api.ts
index 1842a52..c0843d2 100644
--- a/src/types/api.ts
+++ b/src/types/api.ts
@@ -25,6 +25,7 @@ export interface RequestConfig {
   showErrorMessage?: boolean;
   confirmationMessage?: string;
   successMessage?: string;
+  allowDeduplication?: boolean; 
 }
 
 export interface User {
