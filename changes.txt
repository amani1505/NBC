I want when I click the add field to open shadcn sheet from the right to the left like the one I provided from the image
Separate the files to be easy to maintain

Is the sample of categorized field

```
{"statusCode":600,"statusDescription":"Success","message":"Success","timestamp":"2025-08-13 15:33:14","data":{"categories":{"special":{"categoryName":"special","categoryDescription":"Specialized field types for unique data requirements and formats","fieldTypes":[{"type":"DATE","categories":[{"name":"special","description":"Specialized field types for unique data requirements and formats"}],"selectableInForms":true,"configSections":[{"display":"Appearance","fields":{"mode":{"display":"UI Mode","instructions":"Choose between single date or date range","type":"select","default":"single","required":false,"options":["single","range"],"clearable":false},"inline":{"display":"Inline","instructions":"Show the date picker inline","type":"toggle","default":false,"required":false,"options":[],"clearable":false},"fullWidth":{"display":"Full Width","instructions":"Make the inline picker full width","type":"toggle","default":false,"required":false,"options":[],"clearable":false},"columns":{"display":"Columns","instructions":"Number of columns in the date picker","type":"integer","default":1,"required":false,"options":[],"clearable":false},"rows":{"display":"Rows","instructions":"Number of rows in the date picker","type":"integer","default":1,"required":false,"options":[],"clearable":false}}},{"display":"Time Settings","fields":{"timeEnabled":{"display":"Time Enabled","instructions":"Enable time selection","type":"toggle","default":false,"required":false,"options":[],"clearable":false},"timeSecondsEnabled":{"display":"Show Seconds","instructions":"Show seconds in time picker","type":"toggle","default":false,"required":false,"options":[],"clearable":false}}},{"display":"Boundaries","fields":{"earliestDate":{"display":"Earliest Date","instructions":"The earliest selectable date","type":"date","required":false,"options":[],"clearable":false},"latestDate":{"display":"Latest Date","instructions":"The latest selectable date","type":"date","required":false,"options":[],"clearable":false}}},{"display":"Data Format","fields":{"format":{"display":"Format","instructions":"Custom date format pattern (Java DateTimeFormatter)","type":"text","required":false,"options":[],"clearable":false},"timezone":{"display":"Timezone","instructions":"Timezone for date handling","type":"text","default":"UTC","required":false,"options":[],"clearable":false}}}],"defaultConfig":{"mode":"single","inline":false,"fullWidth":false,"columns":1,"rows":1,"timeEnabled":false,"timeSecondsEnabled":false,"timezone":"UTC"}},{"type":"LINK","categories":[{"name":"special","description":"Specialized field types for unique data requirements and formats"}],"selectableInForms":true,"configSections":[{"display":"Behavior","fields":{"collections":{"display":"Collections","instructions":"Select which collections are available for entry linking. Leave empty to allow all collections.","type":"collections","required":false,"options":[],"clearable":true},"allowUrl":{"display":"Allow URL","instructions":"Allow users to enter custom URLs","type":"toggle","default":true,"required":false,"options":[],"clearable":false},"allowEntry":{"display":"Allow Entry","instructions":"Allow users to select entries from collections","type":"toggle","default":true,"required":false,"options":[],"clearable":false},"allowFirstChild":{"display":"Allow First Child","instructions":"Allow users to select the first child entry (for structured collections)","type":"toggle","default":true,"required":false,"options":[],"clearable":false}}}],"defaultConfig":{}}],"fieldTypeCount":2},"number":{"categoryName":"number","categoryDescription":"Numeric field types for mathematical values and calculations","fieldTypes":[{"type":"NUMBER","categories":[{"name":"number","description":"Numeric field types for mathematical values and calculations"}],"selectableInForms":true,"configSections":[{"display":"Behavior","fields":{"numberType":{"display":"Number Type","instructions":"The type of number to handle","type":"select","default":"decimal","required":false,"options":["integer","decimal"],"clearable":false},"placeholder":{"display":"Placeholder","instructions":"Placeholder text for the input field","type":"text","required":false,"options":[],"clearable":false},"default":{"display":"Default Value","instructions":"The default value for this field","type":"text","required":false,"options":[],"clearable":false},"min":{"display":"Minimum Value","instructions":"The minimum allowed value","type":"text","required":false,"options":[],"clearable":false},"max":{"display":"Maximum Value","instructions":"The maximum allowed value","type":"text","required":false,"options":[],"clearable":false},"step":{"display":"Step","instructions":"The step interval for the input","type":"text","required":false,"options":[],"clearable":false}}},{"display":"Appearance","fields":{"prepend":{"display":"Prepend","instructions":"Text to prepend to the field value","type":"text","required":false,"options":[],"clearable":false},"append":{"display":"Append","instructions":"Text to append to the field value","type":"text","required":false,"options":[],"clearable":false}}},{"display":"Formatting","fields":{"decimalPlaces":{"display":"Decimal Places","instructions":"Number of decimal places to display","type":"integer","required":false,"options":[],"clearable":false},"thousandSeparator":{"display":"Thousand Separator","instructions":"Character to use as thousand separator","type":"text","default":",","required":false,"options":[],"clearable":false},"decimalSeparator":{"display":"Decimal Separator","instructions":"Character to use as decimal separator","type":"text","default":".","required":false,"options":[],"clearable":false}}}],"defaultConfig":{"numberType":"decimal","placeholder":"","prepend":"","append":"","decimalPlaces":2,"thousandSeparator":",","decimalSeparator":"."}}],"fieldTypeCount":1},"controls":{"categoryName":"controls","categoryDescription":"Interactive control field types for user selections and choices","fieldTypes":[{"type":"SELECT","categories":[{"name":"controls","description":"Interactive control field types for user selections and choices"}],"selectableInForms":true,"configSections":[{"display":"Options","fields":{"options":{"display":"Options","instructions":"Define the available options for this select field","type":"array","required":false,"options":[],"clearable":false},"taggable":{"display":"Allow additions","instructions":"Allow users to add new options","type":"toggle","default":false,"required":false,"options":[],"clearable":false},"pushTags":{"display":"Push Tags","instructions":"Push new tags to the global options list","type":"toggle","default":false,"required":false,"options":[],"clearable":false}}},{"display":"Selection","fields":{"placeholder":{"display":"Placeholder","instructions":"Placeholder text when no option is selected","type":"text","default":"","required":false,"options":[],"clearable":false},"multiple":{"display":"Multiple","instructions":"Allow multiple selections","type":"toggle","default":false,"required":false,"options":[],"clearable":false},"maxItems":{"display":"Max Items","instructions":"Maximum number of items that can be selected","type":"integer","required":false,"options":[],"clearable":false},"clearable":{"display":"Clearable","instructions":"Allow clearing the selection","type":"toggle","default":false,"required":false,"options":[],"clearable":false},"searchable":{"display":"Searchable","instructions":"Allow searching through options","type":"toggle","default":true,"required":false,"options":[],"clearable":false}}},{"display":"Data","fields":{"castBooleans":{"display":"Cast Booleans","instructions":"Cast string boolean values to actual booleans","type":"toggle","default":false,"required":false,"options":[],"clearable":false},"default":{"display":"Default Value","instructions":"The default selected value(s)","type":"text","required":false,"options":[],"clearable":false}}}],"defaultConfig":{"options":{},"placeholder":"","multiple":false,"clearable":false,"searchable":true,"taggable":false,"pushTags":false,"castBooleans":false}}],"fieldTypeCount":1},"text":{"categoryName":"text","categoryDescription":"Text-based field types for simple and formatted text input","fieldTypes":[{"type":"TEXT","categories":[{"name":"text","description":"Text-based field types for simple and formatted text input"}],"selectableInForms":true,"configSections":[{"display":"Input Behavior","fields":{"inputType":{"display":"Input Type","instructions":"The type of HTML input to render","type":"select","default":"text","required":false,"options":["color","date","email","hidden","month","number","password","tel","text","time","url","week"],"clearable":false},"placeholder":{"display":"Placeholder","instructions":"Placeholder text for the input field","type":"text","required":false,"options":[],"clearable":false},"default":{"display":"Default Value","instructions":"The default value for this field","type":"text","required":false,"options":[],"clearable":false},"characterLimit":{"display":"Character Limit","instructions":"Maximum number of characters allowed","type":"integer","required":false,"options":[],"clearable":false},"autocomplete":{"display":"Autocomplete","instructions":"HTML autocomplete attribute value","type":"select","required":false,"options":["additional-name","address-level1","address-level2","address-level3","address-level4","address-line1","address-line2","address-line3","bday","bday-day","bday-month","bday-year","cc-additional-name","cc-csc","cc-exp","cc-exp-month","cc-exp-year","cc-family-name","cc-given-name","cc-name","cc-number","cc-type","country","country-name","current-password","email","family-name","given-name","honorific-prefix","honorific-suffix","language","name","new-password","nickname","off","on","organization","organization-title","photo","postal-code","sex","street-address","tel","tel-area-code","tel-country-code","tel-extension","tel-local","tel-local-prefix","tel-local-suffix","tel-national","transaction-amount","transaction-currency","url","username"],"clearable":true}}},{"display":"Appearance","fields":{"prepend":{"display":"Prepend","instructions":"Text to prepend to the field value","type":"text","required":false,"options":[],"clearable":false},"append":{"display":"Append","instructions":"Text to append to the field value","type":"text","required":false,"options":[],"clearable":false}}}],"defaultConfig":{"inputType":"text","placeholder":"","default":"","characterLimit":255,"autoComplete":false,"prepend":"","append":""}},{"type":"TEXTAREA","categories":[{"name":"text","description":"Text-based field types for simple and formatted text input"}],"selectableInForms":true,"configSections":[{"display":"Appearance & Behavior","fields":{"placeholder":{"display":"Placeholder","instructions":"Placeholder text for the textarea field","type":"text","required":false,"options":[],"clearable":false},"characterLimit":{"display":"Character Limit","instructions":"Maximum number of characters allowed","type":"integer","required":false,"options":[],"clearable":false},"default":{"display":"Default Value","instructions":"The default value for this field","type":"textarea","required":false,"options":[],"clearable":false},"rows":{"display":"Rows","instructions":"Number of visible text lines","type":"integer","default":4,"required":false,"options":[],"clearable":false},"cols":{"display":"Columns","instructions":"Width of the textarea in characters","type":"integer","required":false,"options":[],"clearable":false}}}],"defaultConfig":{"placeholder":"","characterLimit":5000,"default":"","rows":4,"cols":50}}],"fieldTypeCount":2}}}}


 ```


Here is the code to be modified

```

import { useEffect, useState } from "react";
import { v4 as uuid } from "uuid";
import { cmsDB } from "@/lib/cmsStore";
import type { Blueprint, Entry } from "@/lib/cmsTypes";
import Button from "@/components/ui/button";
import { FieldRenderer } from "@/components/cms/FieldRenderer";
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { useCollection } from "@/hooks/CMS/useCollection";
import { titleToHandle } from "@/utils/titleToHandle";
import { CustomInput } from "@/components/ui/CustomInput";
import { Trash2, Plus, Settings, PlusCircle } from "lucide-react";
import { EntryValueDisplay } from "@/components/cms/EntryValueDisplay";
import type {
  BlueprintContentI,
  BlueprintFieldTypeI,
  BlueprintSectionI,
} from "@/types/cms/blueprint.interface";

// Mock field types - adjust based on your actual field types
const FIELD_TYPES = [
  { value: "TEXT", label: "Text" },
  { value: "TEXTAREA", label: "Textarea" },
  { value: "NUMBER", label: "Number" },
  { value: "EMAIL", label: "Email" },
  { value: "URL", label: "URL" },
  { value: "DATE", label: "Date" },
  { value: "BOOLEAN", label: "Boolean" },
  { value: "SELECT", label: "Select" },
  { value: "MULTISELECT", label: "Multi-select" },
];

function BlueprintCard({ content }: { content: BlueprintContentI }) {
  const [bp, setBp] = useState<Blueprint | null>(null);
  const [bps, setBps] = useState<Blueprint[]>([]);
  const [entries, setEntries] = useState<Entry[]>([]);
  const [values, setValues] = useState<Record<string, any>>({});
  const [open, setOpen] = useState(false);
  const [addSectionOpen, setAddSectionOpen] = useState(false);
  const [addFieldOpen, setAddFieldOpen] = useState(false);
  const [selectedSectionId, setSelectedSectionId] = useState<string | null>(
    null
  );
  const [title, setTitle] = useState(content.title);
  const [handle, setHandle] = useState(content.handle);
  const [isHandleManuallyEdited, setIsHandleManuallyEdited] = useState(false);
  const [localSchema, setLocalSchema] = useState(content.schema);

  // New section form state
  const [newSectionTitle, setNewSectionTitle] = useState("");
  const [newSectionDescription, setNewSectionDescription] = useState("");

  // New field form state
  const [newFieldTitle, setNewFieldTitle] = useState("");
  const [newFieldType, setNewFieldType] = useState("text");
  const [newFieldDescription, setNewFieldDescription] = useState("");
  const [newFieldRequired, setNewFieldRequired] = useState(false);
  const [newFieldPlaceholder, setNewFieldPlaceholder] = useState("");

  const { updateLoading, updateCollection } = useCollection();

  // Get all fields from all sections
  const getAllFields = (): BlueprintFieldTypeI[] => {
    if (!localSchema?.sections) return [];

    return localSchema.sections.reduce((allFields, section) => {
      return [...allFields, ...(section.fields ?? [])];
    }, [] as BlueprintFieldTypeI[]);
  };

  const load = async () => {
    const allBps = await cmsDB.listBlueprints();
    setBps(allBps);
    setBp(allBps.find((b) => b.id === content.reference) || null);
    setEntries(await cmsDB.listEntriesByCollection(content.reference));
  };

  useEffect(() => {
    load();
  }, [content.reference]);

  useEffect(() => {
    setTitle(content.title);
    setLocalSchema(content.schema);
  }, [content.reference, content.title, content.schema]);

  const saveEntry = async () => {
    const now = new Date().toISOString();
    await cmsDB.saveEntry({
      id: uuid(),
      collectionId: content.reference,
      values,
      createdAt: now,
      updatedAt: now,
    });
    setValues({});
    load();
  };

  const removeEntry = async (id: string) => {
    await cmsDB.deleteEntry(id);
    load();
  };

  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newTitle = e.target.value;
    setTitle(newTitle);

    // Only auto-generate handle if it hasn't been manually edited
    if (!isHandleManuallyEdited) {
      setHandle(titleToHandle(newTitle));
    }
  };

  const handleHandleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setHandle(e.target.value);
    setIsHandleManuallyEdited(true);
  };

  const saveCollectionSettings = async () => {
    if (!title || !handle) return;
    if (updateCollection) {
      await updateCollection(content.reference, {
        title,
        handle,
      });
    }
    setOpen(false);
  };

  // Add new section
  const addSection = () => {
    if (!newSectionTitle.trim()) return;

    const newSection: BlueprintSectionI = {
      id: "",
      displayName: newSectionTitle,
      handle: titleToHandle(newSectionTitle),
      description: newSectionDescription || "",
      fields: [],
    };

    setLocalSchema((prev) => ({
      ...prev,
      sections: [...(prev?.sections || []), newSection],
    }));

    // Reset form
    setNewSectionTitle("");
    setNewSectionDescription("");
    setAddSectionOpen(false);
  };

  // Remove section
  const removeSection = (sectionId: string) => {
    setLocalSchema((prev) => ({
      ...prev,
      sections:
        prev?.sections?.filter((section) => section.id !== sectionId) || [],
    }));
  };

  // Add new field to section
  const addField = () => {
    if (!newFieldTitle.trim() || !selectedSectionId) return;

    const newField: BlueprintFieldTypeI = {
      id: "",
      type: newFieldType as any,
      displayName: newFieldTitle,
      handle: titleToHandle(newFieldTitle),
      description: newFieldDescription || "",
      isRequired: newFieldRequired,
      config: { fieldType: newFieldType, type: newFieldType }, // Provide required config properties
      // placeholder: newFieldPlaceholder || "",
    };

    setLocalSchema((prev) => ({
      ...prev,
      sections:
        prev?.sections?.map((section) =>
          section.id === selectedSectionId
            ? { ...section, fields: [...(section.fields ?? []), newField] }
            : section
        ) || [],
    }));

    // Reset form
    setNewFieldTitle("");
    setNewFieldType("text");
    setNewFieldDescription("");
    setNewFieldRequired(false);
    setNewFieldPlaceholder("");
    setAddFieldOpen(false);
    setSelectedSectionId(null);
  };

  // Remove field from section
  const removeField = (sectionId: string, fieldId: string) => {
    setLocalSchema((prev) => ({
      ...prev,
      sections:
        prev?.sections?.map((section) =>
          section.id === sectionId
            ? {
                ...section,
                fields: (section.fields ?? []).filter(
                  (field) => field.id !== fieldId
                ),
              }
            : section
        ) || [],
    }));
  };

  const allFields = getAllFields();

  return (
    <div className="p-4 border rounded-md bg-white space-y-4 min-w-0 border-gray-300">
      {/* Collection Header */}
      <div className="flex items-center justify-between">
        <div className="flex-1">
          <div className="font-medium text-lg">{content.title}</div>
          <div className="text-xs text-muted-foreground mb-1">
            Handle: {content.handle || "Unknown"}
          </div>
          <div className="flex items-center gap-4 text-xs text-gray-500">
            <span
              className={`px-2 py-1 rounded-full text-xs ${
                content.isActive
                  ? "bg-green-100 text-green-700"
                  : "bg-red-100 text-red-700"
              }`}
            >
              {content.isActive ? "Active" : "Inactive"}
            </span>
            <span>Version: {localSchema?.version}</span>
          </div>
        </div>
        <Button
          variant="link"
          size="sm"
          onClick={() => setOpen(true)}
          className="px-0"
          icon={Settings}
        >
          Manage settings
        </Button>
      </div>

      {/* Schema Management Section */}
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <div className="text-sm font-medium text-gray-600">
            Collection Schema
          </div>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setAddSectionOpen(true)}
            icon={Plus}
          >
            Add Section
          </Button>
        </div>

        {/* Render sections and fields */}
        {localSchema?.sections &&
          localSchema.sections.map((section) => (
            <div
              key={section.id}
              className="border border-gray-200 rounded-lg p-3 bg-gray-50/50"
            >
              <div className="mb-3">
                <div className="flex items-center justify-between">
                  <h4 className="text-sm font-semibold text-gray-800">
                    {section.displayName}
                  </h4>
                  <div className="flex items-center gap-2">
                    <span className="text-xs text-gray-500 bg-white px-2 py-1 rounded">
                      {section.fields?.length ?? 0} field
                      {(section.fields?.length ?? 0) !== 1 ? "s" : ""}
                    </span>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setSelectedSectionId(section.id ?? null);
                        setAddFieldOpen(true);
                      }}
                      icon={PlusCircle}
                    >
                      Add Field
                    </Button>
                    <Button
                      variant="iconRounded"
                      size="sm"
                      onClick={() => section.id && removeSection(section.id)}
                      className="bg-red-500 hover:bg-red-700 text-white"
                      icon={Trash2}
                    />
                  </div>
                </div>
                {section.description && (
                  <p className="text-xs text-gray-600 mt-1">
                    {section.description}
                  </p>
                )}
              </div>
              <div className="space-y-3">
                {section.fields?.map((field) => (
                  <div key={field.id} className="flex items-center gap-2">
                    <div className="flex-1">
                      <FieldRenderer
                        field={field}
                        value={values[field.handle]}
                        onChange={(v) =>
                          setValues((s) => ({ ...s, [field.handle]: v }))
                        }
                      />
                    </div>
                    <Button
                      variant="iconRounded"
                      size="sm"
                      onClick={() => removeField(section.id!, field.id)}
                      className="bg-red-500 hover:bg-red-700 text-white"
                      icon={Trash2}
                    />
                  </div>
                ))}
                {section.fields?.length === 0 && (
                  <p className="text-xs text-gray-500 italic text-center py-4">
                    No fields in this section. Click "Add Field" to add one.
                  </p>
                )}
              </div>
            </div>
          ))}

        {localSchema?.sections && localSchema.sections.length > 0 && (
          <Button variant="secondary" onClick={saveEntry} className="w-full">
            Add Entry
          </Button>
        )}

        {(!localSchema?.sections || localSchema.sections.length === 0) && (
          <div className="text-center py-8 text-gray-500">
            <p className="text-sm">No sections defined yet.</p>
            <p className="text-xs">Click "Add Section" to get started.</p>
          </div>
        )}
      </div>

      {/* Entries Section */}
      <div>
        <h3 className="text-sm font-semibold mb-2">
          Entries ({entries.length})
        </h3>
        <div className="space-y-2">
          {entries.map((e) => (
            <div
              key={e.id}
              className="flex items-center justify-between p-3 rounded-md border bg-background/60 border-gray-300"
            >
              <div className="text-sm truncate max-w-[70%] flex items-center gap-2">
                {allFields
                  .slice(0, 3) // Show only first 3 fields
                  .map((field) => (
                    <div key={field.id} className="flex items-center gap-1">
                      <EntryValueDisplay
                        value={e.values[field.handle]}
                        field={field}
                      />
                    </div>
                  ))}
                {allFields.length > 3 && (
                  <span className="text-gray-400">...</span>
                )}
              </div>
              <Button
                variant="iconRounded"
                size="sm"
                onClick={() => removeEntry(e.id)}
                className="bg-red-500 hover:bg-red-700 text-white"
                icon={Trash2}
              />
            </div>
          ))}
          {entries.length === 0 && (
            <p className="text-xs text-muted-foreground">
              No entries yet.{" "}
              {allFields.length > 0
                ? "Add one above."
                : "Define some fields first."}
            </p>
          )}
        </div>
      </div>

      {/* Settings Dialog */}
      <Dialog open={open} onOpenChange={setOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Collection settings</DialogTitle>
          </DialogHeader>
          <div className="space-y-3">
            <div>
              <CustomInput
                label="Title"
                placeholder="Edit Title"
                value={title}
                onChange={handleTitleChange}
              />
            </div>
            <div>
              <CustomInput
                label="Handle"
                placeholder="Edit Handle"
                value={handle}
                onChange={handleHandleChange}
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setOpen(false)}>
              Cancel
            </Button>
            <Button
              variant="primary"
              onClick={saveCollectionSettings}
              disabled={!title || !handle || updateLoading}
              loading={updateLoading}
            >
              {updateLoading ? "Updating..." : "Update"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Add Section Dialog */}
      <Dialog open={addSectionOpen} onOpenChange={setAddSectionOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Add New Section</DialogTitle>
          </DialogHeader>
          <div className="space-y-3">
            <div>
              <CustomInput
                label="Section Title"
                placeholder="Enter section title"
                value={newSectionTitle}
                onChange={(e) => setNewSectionTitle(e.target.value)}
              />
            </div>
            <div>
              <CustomInput
                label="Description (Optional)"
                placeholder="Enter section description"
                value={newSectionDescription}
                onChange={(e) => setNewSectionDescription(e.target.value)}
              />
            </div>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => {
                setAddSectionOpen(false);
                setNewSectionTitle("");
                setNewSectionDescription("");
              }}
            >
              Cancel
            </Button>
            <Button
              variant="primary"
              onClick={addSection}
              disabled={!newSectionTitle.trim()}
            >
              Add Section
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Add Field Dialog */}
      <Dialog open={addFieldOpen} onOpenChange={setAddFieldOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Add New Field</DialogTitle>
          </DialogHeader>
          <div className="space-y-3">
            <div>
              <CustomInput
                label="Field Title"
                placeholder="Enter field title"
                value={newFieldTitle}
                onChange={(e) => setNewFieldTitle(e.target.value)}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Field Type
              </label>
              <select
                value={newFieldType}
                onChange={(e) => setNewFieldType(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                {FIELD_TYPES.map((type) => (
                  <option key={type.value} value={type.value}>
                    {type.label}
                  </option>
                ))}
              </select>
            </div>
            <div>
              <CustomInput
                label="Description (Optional)"
                placeholder="Enter field description"
                value={newFieldDescription}
                onChange={(e) => setNewFieldDescription(e.target.value)}
              />
            </div>
            <div>
              <CustomInput
                label="Placeholder (Optional)"
                placeholder="Enter field placeholder"
                value={newFieldPlaceholder}
                onChange={(e) => setNewFieldPlaceholder(e.target.value)}
              />
            </div>
            <div className="flex items-center space-x-2">
              <input
                type="checkbox"
                id="required"
                checked={newFieldRequired}
                onChange={(e) => setNewFieldRequired(e.target.checked)}
                className="rounded border-gray-300 focus:ring-blue-500"
              />
              <label htmlFor="required" className="text-sm text-gray-700">
                Required field
              </label>
            </div>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => {
                setAddFieldOpen(false);
                setNewFieldTitle("");
                setNewFieldType("text");
                setNewFieldDescription("");
                setNewFieldRequired(false);
                setNewFieldPlaceholder("");
                setSelectedSectionId(null);
              }}
            >
              Cancel
            </Button>
            <Button
              variant="primary"
              onClick={addField}
              disabled={!newFieldTitle.trim() || !selectedSectionId}
            >
              Add Field
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}

export default BlueprintCard;




```
