diff --git a/.env b/.env
index 9a2ae48..ae3c379 100644
--- a/.env
+++ b/.env
@@ -1,2 +1,5 @@
-VITE_API_URL=http://localhost:3000/api
+VITE_API_URL=http://localhost:8000/api
+VITE_CMS_URL=http://22.32.245.79:8449/api/v1
+
+VITE_APP_NAME=NBC Site
 VITE_WEBSOCKET_URL=ws://localhost:3000/ws
\ No newline at end of file
diff --git a/src/App.tsx b/src/App.tsx
index 2a3f0c1..dd7f8f5 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -1,14 +1,28 @@
-import { Suspense } from "react";
+import { Suspense, useEffect } from "react";
 import { BrowserRouter, Routes, Route } from "react-router-dom";
 import Footer from "./components/Home/Footer";
 import MainNavigation from "./components/Navigation/MainNavigation";
 import "./App.css";
-import { dashboardRoutes } from "./Routes/DashboardRoutes";
-import { cmsRoutes } from "./Routes/CMSRoutes";
-import { landingRoutes } from "./Routes/LandingRoutes";
-import { statusRoutes } from "./Routes/StatusRoutes";
+import dashboardRoutes from "./Routes/DashboardRoutes";
+import cmsRoutes from "./Routes/CMSRoutes";
+import statusRoutes from "./Routes/StatusRoutes";
+import landingRoutes from "./Routes/LandingRoutes";
+import MessageProvider from "@/Context/MessageContext";
+import { MessageContainer } from "@/components/ui/Messages/MessageContainer";
+import { globalMessageService } from "@/services/GlobalMessageService";
+import { useMessage } from "@/hooks/useMessage";
 
-// Import route configurations
+// Component to initialize global messaging
+const MessageInitializer = () => {
+  const { showMessage } = useMessage();
+
+  useEffect(() => {
+    // Initialize global message service with the callback
+    globalMessageService.setMessageCallback(showMessage);
+  }, [showMessage]);
+
+  return null;
+};
 
 // Layout Components
 const MainLayout = ({ children }: { children: React.ReactNode }) => (
@@ -25,37 +39,41 @@ const LoadingFallback = () => (
 
 function App() {
   return (
-    <BrowserRouter>
-      <Suspense fallback={<LoadingFallback />}>
-        <Routes>
-          {/* Dashboard Routes */}
-          {dashboardRoutes}
-
-          {/* CMS Routes */}
-          {cmsRoutes}
-
-          {/* Status Routes */}
-          {statusRoutes}
-
-          {/* Landing Routes with MainLayout */}
-          {landingRoutes.map((route, index) => (
-            <Route
-              key={index}
-              path={route.path}
-              element={
-                route.withLayout ? (
-                  <MainLayout>{route.element}</MainLayout>
-                ) : (
-                  route.element
-                )
-              }
-            >
-              {route.children}
-            </Route>
-          ))}
-        </Routes>
-      </Suspense>
-    </BrowserRouter>
+    <MessageProvider>
+      <MessageInitializer />
+      <BrowserRouter>
+        <Suspense fallback={<LoadingFallback />}>
+          <Routes>
+            {/* Dashboard Routes */}
+            {dashboardRoutes}
+
+            {/* CMS Routes */}
+            {cmsRoutes}
+
+            {/* Status Routes */}
+            {statusRoutes}
+
+            {/* Landing Routes with MainLayout */}
+            {landingRoutes.map((route, index) => (
+              <Route
+                key={index}
+                path={route.path}
+                element={
+                  route.withLayout ? (
+                    <MainLayout>{route.element}</MainLayout>
+                  ) : (
+                    route.element
+                  )
+                }
+              >
+                {route.children}
+              </Route>
+            ))}
+          </Routes>
+        </Suspense>
+        <MessageContainer />
+      </BrowserRouter>
+    </MessageProvider>
   );
 }
 
diff --git a/src/Routes/CMSRoutes.tsx b/src/Routes/CMSRoutes.tsx
index e812314..936013c 100644
--- a/src/Routes/CMSRoutes.tsx
+++ b/src/Routes/CMSRoutes.tsx
@@ -1,6 +1,9 @@
 import { lazy } from "react";
 import { Route } from "react-router-dom";
 import CMSLayout from "@/Pages/Dashboard/CMS/CMSLayout";
+import ProtectedCMSRoute from "./ProtectedCMSRoute";
+// Make sure the file exists at the specified path and the filename matches exactly (including case).
+
 
 // Lazy Loading CMS Pages
 const CMSDashboard = lazy(
@@ -9,10 +12,25 @@ const CMSDashboard = lazy(
 const CMSSection = lazy(
   () => import("@/Pages/Dashboard/CMS/CMSPages/Sections")
 );
+const CMSLogin = lazy(() => import("@/Pages/Dashboard/CMS/CMSPages/CMSLogin"));
+// Protected Route Component
+// Moved to ProtectedCMSRoute.tsx
+
+const cmsRoutes = (
+  <>
+    <Route path="/cms/login" element={<CMSLogin />} />
+    <Route
+      path="/cms/*"
+      element={
+        <ProtectedCMSRoute>
+          <CMSLayout />
+        </ProtectedCMSRoute>
+      }
+    >
+      <Route index element={<CMSDashboard />} />
+      <Route path="sections" element={<CMSSection />} />
+    </Route>
+  </>
+);
 
-export const cmsRoutes = (
-  <Route path="/cms/*" element={<CMSLayout />}>
-    <Route index element={<CMSDashboard />} />
-    <Route path="sections" element={<CMSSection />} />
-  </Route>
-);
\ No newline at end of file
+export default cmsRoutes;
diff --git a/src/Routes/DashboardRoutes.tsx b/src/Routes/DashboardRoutes.tsx
index 967c06b..c6f174f 100644
--- a/src/Routes/DashboardRoutes.tsx
+++ b/src/Routes/DashboardRoutes.tsx
@@ -65,7 +65,7 @@ const AllProducts = lazy(
   () => import("@/Pages/Dashboard/User/MarketPlace/AllProducts")
 );
 
-export const dashboardRoutes = (
+const dashboardRoutes = (
   <Route path="dashboard" element={<UserDashboardLayout />}>
     <Route index element={<UserDashboard />} />
     <Route path="profile" element={<UserProfile />} />
@@ -97,12 +97,11 @@ export const dashboardRoutes = (
       <Route path="my-groups" element={<MyGroups />} />
     </Route>
 
-    {/* Market Place */}
     <Route path="market-place">
       <Route index element={<MarketPlace />} />
       <Route path="all-products" element={<AllProducts />} />
     </Route>
-
-    {/* Fallback Route */}
   </Route>
 );
+
+export default dashboardRoutes;
diff --git a/src/Routes/LandingRoutes.tsx b/src/Routes/LandingRoutes.tsx
index ac845c6..7402e1d 100644
--- a/src/Routes/LandingRoutes.tsx
+++ b/src/Routes/LandingRoutes.tsx
@@ -62,7 +62,7 @@ interface RouteConfig {
   children?: ReactNode;
 }
 
-export const landingRoutes: RouteConfig[] = [
+const landingRoutes: RouteConfig[] = [
   // Home Route
   {
     path: "/",
@@ -199,3 +199,5 @@ export const landingRoutes: RouteConfig[] = [
     withLayout: true,
   },
 ];
+
+export default landingRoutes;
\ No newline at end of file
diff --git a/src/Routes/StatusRoutes.tsx b/src/Routes/StatusRoutes.tsx
index 168ff54..2a5f807 100644
--- a/src/Routes/StatusRoutes.tsx
+++ b/src/Routes/StatusRoutes.tsx
@@ -7,7 +7,7 @@ const NotFound = lazy(() => import("@/Pages/Status/NotFound"));
 const Error = lazy(() => import("@/Pages/Status/Error"));
 const UnderMaintenance = lazy(() => import("@/Pages/Status/UnderMaintenance"));
 
-export const statusRoutes = (
+const statusRoutes = (
   <>
     <Route path="sign-up" element={<SignUp />} />
     <Route path="error" element={<Error />} />
@@ -15,4 +15,6 @@ export const statusRoutes = (
     <Route path="not-found" element={<NotFound />} />
     <Route path="*" element={<NotFound />} />
   </>
-);
\ No newline at end of file
+);
+
+export default statusRoutes;
diff --git a/src/components/shop/ShopCategoryFilter.tsx b/src/components/shop/ShopCategoryFilter.tsx
index 856f196..683e398 100644
--- a/src/components/shop/ShopCategoryFilter.tsx
+++ b/src/components/shop/ShopCategoryFilter.tsx
@@ -1,5 +1,5 @@
-import { Check } from "lucide-react";
 import { cn } from "@/lib/utils";
+import { Checkbox } from "../ui/checkbox";
 
 interface Category {
   id: string;
@@ -33,26 +33,12 @@ const ShopCategoryFilter = ({
             className="flex items-center gap-3 cursor-pointer group"
           >
             <div className="relative">
-              <input
-                type="checkbox"
+              <Checkbox
                 checked={category.selected || false}
-                onChange={(e) =>
-                  onCategoryChange?.(category.id, e.target.checked)
-                }
-                className="sr-only"
+                onCheckedChange={(e) => {
+                  onCategoryChange?.(category.id, e as boolean);
+                }}
               />
-              <div
-                className={cn(
-                  "w-4 h-4 border-2 rounded transition-all duration-200",
-                  category.selected
-                    ? "bg-shop-blue border-shop-blue"
-                    : "border-shop-border group-hover:border-shop-blue"
-                )}
-              >
-                {category.selected && (
-                  <Check className="w-3 h-3 text-white absolute top-0.5 left-0.5 transform -translate-x-0.5 -translate-y-0.5" />
-                )}
-              </div>
             </div>
 
             <span
diff --git a/src/components/ui/CustomInput.tsx b/src/components/ui/CustomInput.tsx
index b598a1b..14f94c1 100644
--- a/src/components/ui/CustomInput.tsx
+++ b/src/components/ui/CustomInput.tsx
@@ -76,7 +76,7 @@ export const CustomInput = forwardRef<HTMLInputElement, CustomInputProps>(({
   return (
     <div className="space-y-2">
       {label && (
-        <label className="text-sm font-medium text-foreground block">
+        <label className="text-sm font-medium text-foreground block capitalize">
           {label}
           {required && <span className="text-red-500 ml-1">*</span>}
         </label>
diff --git a/src/components/ui/button.tsx b/src/components/ui/button.tsx
index 2315a20..93606c7 100644
--- a/src/components/ui/button.tsx
+++ b/src/components/ui/button.tsx
@@ -61,7 +61,8 @@ const Button = ({
     info: "bg-cyan-600 text-white shadow-sm hover:bg-cyan-700 hover:shadow-cyan-200/50 transition-colors duration-300",
     outline:
       "border border-nbc-dark-950 text-nbc-dark-950 bg-transparent group hover:border-nbc-dark-950 transition-colors duration-300",
-    dropdown:"border border-nbc-dark-950 text-nbc-dark-950 bg-transparent group hover:border-nbc-dark-950 transition-colors duration-300",
+    dropdown:
+      "border border-nbc-dark-950 text-nbc-dark-950 bg-transparent group hover:border-nbc-dark-950 transition-colors duration-300",
     iconOutline:
       "border-2 border-nbc-dark-950 text-nbc-dark-950 bg-transparent group hover:border-nbc-dark-950 transition-colors duration-300 rounded-full",
     iconRounded:
@@ -105,11 +106,12 @@ const Button = ({
   };
 
   // Determine if this is an icon-only button
-  const isIconOnly = (variant === "iconOutline" || variant === "iconRounded") && !children;
-  
+  const isIconOnly =
+    (variant === "iconOutline" || variant === "iconRounded") && !children;
+
   // Choose appropriate size classes
   const sizeClasses = isIconOnly ? iconSizes[size] : sizes[size];
-  
+
   const buttonClasses = `${baseStyles} ${variants[variant]} ${sizeClasses} ${className}`;
 
   // Special handling for outline variants with fill animation
@@ -129,7 +131,7 @@ const Button = ({
       {isOutline && (
         <span className="absolute inset-0 bg-nbc-dark-950 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300 origin-left rounded-inherit"></span>
       )}
-      
+
       {isIconOutline && (
         <span className="absolute inset-0 bg-nbc-dark-950 transform scale-0 group-hover:scale-100 transition-transform duration-300 rounded-full"></span>
       )}
@@ -186,18 +188,18 @@ const Button = ({
         )}
 
         {Icon && iconPosition === "left" && !loading && (
-          <Icon 
-            size={iconDimensions[size]} 
-            className={!isIconOnly && children ? "mr-2" : ""} 
+          <Icon
+            size={iconDimensions[size]}
+            className={!isIconOnly && children ? "mr-2" : ""}
           />
         )}
 
         {children}
 
         {Icon && iconPosition === "right" && !loading && (
-          <Icon 
-            size={iconDimensions[size]} 
-            className={!isIconOnly && children ? "ml-2" : ""} 
+          <Icon
+            size={iconDimensions[size]}
+            className={!isIconOnly && children ? "ml-2" : ""}
           />
         )}
       </span>
@@ -205,4 +207,4 @@ const Button = ({
   );
 };
 
-export default Button;
\ No newline at end of file
+export default Button;
diff --git a/src/config/index.ts b/src/config/index.ts
index 4982225..276da52 100644
--- a/src/config/index.ts
+++ b/src/config/index.ts
@@ -2,6 +2,8 @@ import type { Config } from "@/types/config";
 
 const config: Config = {
   apiBaseUrl: import.meta.env.VITE_API_BASE_URL || "http://localhost:3000/api",
+  cmsApiBaseUrl:
+    import.meta.env.VITE_CMS_URL || "http://localhost:3000/cms-api",
 };
 
 export default config;
diff --git a/src/main.tsx b/src/main.tsx
index 3835faf..e85841b 100644
--- a/src/main.tsx
+++ b/src/main.tsx
@@ -1,11 +1,14 @@
-import { StrictMode } from 'react'
-import { createRoot } from 'react-dom/client'
-import './index.css'
-import 'react-quill-new/dist/quill.snow.css'; 
-import App from './App.tsx'
+import { StrictMode } from "react";
+import { createRoot } from "react-dom/client";
+import "./index.css";
+import "react-quill-new/dist/quill.snow.css";
+import App from "./App.tsx";
+import CMSAuthProvider from "./Context/CMSAuthProvider.tsx";
 
-createRoot(document.getElementById('root')!).render(
+createRoot(document.getElementById("root")!).render(
   <StrictMode>
-    <App />
-  </StrictMode>,
-)
+    <CMSAuthProvider>
+      <App />
+    </CMSAuthProvider>
+  </StrictMode>
+);
diff --git a/src/services/Api.service.ts b/src/services/Api.service.ts
index 7a54f49..78db9c5 100644
--- a/src/services/Api.service.ts
+++ b/src/services/Api.service.ts
@@ -1,51 +1,52 @@
-import type { ApiError, ApiResponse, RequestConfig } from '@/types/api';
-import type { Message } from '@/types/message';
-import { showConfirmation } from '@/utils/confirmation';
-import axios, { AxiosError, type AxiosInstance, type AxiosResponse } from 'axios';
-
+import type { ApiError, ApiResponse, RequestConfig } from "@/types/api";
+import { showConfirmation } from "@/utils/confirmation";
+import { globalMessageService } from "./GlobalMessageService";
+import axios, {
+  AxiosError,
+  type AxiosInstance,
+  type AxiosResponse,
+} from "axios";
 
 export class ApiService {
   private axiosInstance: AxiosInstance;
   private readonly PRECONDITION_FAILED = 428;
   private readonly STATUS_ERROR_THRESHOLD = 300;
-  private messageCallback?: (message: Omit<Message, 'id'>) => void;
-
-  constructor(baseURL: string = process.env.NEXT_PUBLIC_API_URL || '/api') {
+  constructor(baseURL: string) {
     this.axiosInstance = axios.create({
       baseURL,
       timeout: 30000,
+      withCredentials:true,
       headers: {
-        'Content-Type': 'application/json',
+        "Content-Type": "application/json",
+        
       },
     });
 
     this.setupInterceptors();
   }
 
-  // Set message callback for dynamic message handling
-  setMessageCallback(callback: (message: Omit<Message, 'id'>) => void): void {
-    this.messageCallback = callback;
-  }
-
   private setupInterceptors(): void {
     // Request interceptor
     this.axiosInstance.interceptors.request.use(
       (config) => {
         // Add auth token if available
-        const token = localStorage.getItem('auth_token');
+        const token = localStorage.getItem("accessToken");
         if (token) {
           config.headers.Authorization = `Bearer ${token}`;
         }
 
         // Add request timestamp for debugging
         config.metadata = { startTime: new Date() };
-        
-        console.log(`🚀 ${config.method?.toUpperCase()} ${config.url}`, config.data || config.params);
-        
+
+        // console.log(
+        //   `🚀 ${config.method?.toUpperCase()} ${config.url}`,
+        //   config.data || config.params
+        // );
+
         return config;
       },
       (error) => {
-        console.error('❌ Request Error:', error);
+        // console.error("❌ Request Error:", error);
         return Promise.reject(error);
       }
     );
@@ -54,22 +55,36 @@ export class ApiService {
     this.axiosInstance.interceptors.response.use(
       (response: AxiosResponse) => {
         const startTime = response.config?.metadata?.startTime;
-        const duration = startTime ? new Date().getTime() - startTime.getTime() : 0;
-        
-        console.log(`✅ ${response.config.method?.toUpperCase()} ${response.config.url} (${duration}ms)`, response.data);
-        
+        const duration = startTime
+          ? new Date().getTime() - startTime.getTime()
+          : 0;
+
+        // console.log(
+        //   `✅ ${response.config.method?.toUpperCase()} ${
+        //     response.config.url
+        //   } (${duration}ms)`,
+        //   response.data
+        // );
+
         return response;
       },
       (error: AxiosError) => {
         const startTime = error.config?.metadata?.startTime;
-        const duration = startTime ? new Date().getTime() - startTime.getTime() : 0;
-        
-        console.error(`❌ ${error.config?.method?.toUpperCase()} ${error.config?.url} (${duration}ms)`, error.response?.data || error.message);
+        const duration = startTime
+          ? new Date().getTime() - startTime.getTime()
+          : 0;
+
+        // console.error(
+        //   `❌ ${error.config?.method?.toUpperCase()} ${
+        //     error.config?.url
+        //   } (${duration}ms)`,
+        //   error.response?.data || error.message
+        // );
 
         // Handle token expiration
         if (error.response?.status === 401) {
-          localStorage.removeItem('auth_token');
-          window.location.href = '/login';
+          localStorage.removeItem("accessToken");
+          window.location.href = "/login";
         }
 
         return Promise.reject(error);
@@ -78,77 +93,69 @@ export class ApiService {
   }
 
   private handleSuccess(message?: string): void {
-    if (message && this.messageCallback) {
-      this.messageCallback({
-        type: 'success',
-        title: 'Success',
-        message,
-      });
+    if (message) {
+      globalMessageService.success("Success", message);
     }
   }
 
   private handleFailure(error: ApiError): { error: string; path?: string } {
     if (!error.response) {
-      console.error('Network error or no response received:', error.message);
-      const errorMsg = 'Network error. Please check your connection.';
-      
-      if (this.messageCallback) {
-        this.messageCallback({
-          type: 'error',
-          title: 'Network Error',
-          message: errorMsg,
-        });
-      }
-      
+      // console.error("Network error or no response received:", error.message);
+      const errorMsg = "Network error. Please check your connection.";
+
+      globalMessageService.error("Network Error", errorMsg);
       return { error: errorMsg };
     }
 
     const errorData = error.response.data;
-    const errorMsg = errorData?.message?.trim() || 'An unexpected error occurred';
+    const errorMsg =
+      errorData?.message?.trim() || "An unexpected error occurred";
     let redirectPath = errorData?.errors?.redirect;
 
     // Clean up redirect path
-    if (typeof redirectPath === 'string' && redirectPath.startsWith('\\')) {
-      redirectPath = redirectPath.replace(/\\/g, '');
+    if (typeof redirectPath === "string" && redirectPath.startsWith("\\")) {
+      redirectPath = redirectPath.replace(/\\/g, "");
     }
 
     // Handle specific redirect scenarios
     const redirectMessages = [
-      'Forbidden. Admin access required.',
-      'Forbidden - You do not have permission to access this resource.',
+      "Forbidden. Admin access required.",
+      "Forbidden - You do not have permission to access this resource.",
     ];
 
-    if (redirectPath && redirectMessages.some(msg => errorMsg?.includes(msg))) {
+    if (
+      redirectPath &&
+      redirectMessages.some((msg) => errorMsg?.includes(msg))
+    ) {
       setTimeout(() => {
         window.location.assign(redirectPath);
       }, 100);
-      return { error: 'Redirecting...', path: redirectPath };
+      return { error: "Redirecting...", path: redirectPath };
     }
 
     // Show error message
-    if (this.messageCallback) {
-      this.messageCallback({
-        type: 'error',
-        title: 'Error',
-        message: error.response?.data?.errors?.error || errorMsg,
-      });
-    }
-    
+    globalMessageService.error(
+      "Error",
+      error.response?.data?.errors?.error || errorMsg
+    );
+
     return { error: errorMsg };
   }
 
-  async get<T = any>(
-    url: string, 
-    params?: any, 
-  ): Promise<ApiResponse<T>> {
+  async get<T = any>(url: string, params?: any): Promise<ApiResponse<T>> {
     try {
-      const response = await this.axiosInstance.get<ApiResponse<T>>(url, { params });
+      const response = await this.axiosInstance.get<ApiResponse<T>>(url, {
+        params,
+      });
       return response.data;
     } catch (error: any) {
       this.handleFailure(error as ApiError);
-      
+
       const apiError = error as ApiError;
-      if (apiError.response?.status && apiError.response.status > this.STATUS_ERROR_THRESHOLD) {
+      if (
+        apiError.response?.status &&
+        apiError.response.status > this.STATUS_ERROR_THRESHOLD
+      ) {
         throw error;
       }
       throw error;
@@ -156,40 +163,42 @@ export class ApiService {
   }
 
   async post<T = any>(
-    url: string, 
-    data: any, 
+    url: string,
+    data: any,
     config: RequestConfig = {}
   ): Promise<ApiResponse<T>> {
     try {
       const response = await this.axiosInstance.post<ApiResponse<T>>(url, data);
-      
+
       if (config.successMessage || config.showSuccessMessage) {
-        this.handleSuccess(config.successMessage || 'Operation completed successfully');
+        this.handleSuccess(
+          config.successMessage || "Operation completed successfully"
+        );
       }
-      
+
       return response.data;
     } catch (error: any) {
       if ((error as ApiError).response?.status === this.PRECONDITION_FAILED) {
-        return { data: null, message: 'Precondition failed' } as any;
+        return { data: null, message: "Precondition failed" } as any;
       }
-      
+
       this.handleFailure(error as ApiError);
       throw error;
     }
   }
 
   async put<T = any>(
-    url: string, 
-    data: any, 
+    url: string,
+    data: any,
     config: RequestConfig = {}
   ): Promise<ApiResponse<T>> {
     try {
       const response = await this.axiosInstance.put<ApiResponse<T>>(url, data);
-      
+
       if (config.successMessage || config.showSuccessMessage) {
-        this.handleSuccess(config.successMessage || 'Updated successfully');
+        this.handleSuccess(config.successMessage || "Updated successfully");
       }
-      
+
       return response.data;
     } catch (error: any) {
       this.handleFailure(error as ApiError);
@@ -198,17 +207,20 @@ export class ApiService {
   }
 
   async patch<T = any>(
-    url: string, 
-    data: any, 
+    url: string,
+    data: any,
     config: RequestConfig = {}
   ): Promise<ApiResponse<T>> {
     try {
-      const response = await this.axiosInstance.patch<ApiResponse<T>>(url, data);
-      
+      const response = await this.axiosInstance.patch<ApiResponse<T>>(
+        url,
+        data
+      );
+
       if (config.successMessage || config.showSuccessMessage) {
-        this.handleSuccess(config.successMessage || 'Updated successfully');
+        this.handleSuccess(config.successMessage || "Updated successfully");
       }
-      
+
       return response.data;
     } catch (error: any) {
       this.handleFailure(error as ApiError);
@@ -217,32 +229,32 @@ export class ApiService {
   }
 
   async delete<T = any>(
-    url: string, 
+    url: string,
     config: RequestConfig = {}
   ): Promise<ApiResponse<T> | false> {
     try {
       // Show confirmation dialog if required
       if (config.confirmationMessage) {
         const confirmed = await showConfirmation(
-          'Confirm Deletion',
+          "Confirm Deletion",
           config.confirmationMessage,
-          'Delete',
-          'Cancel'
+          "Delete",
+          "Cancel"
         );
-        
+
         if (!confirmed) {
           return false;
         }
       }
 
       const response = await this.axiosInstance.delete<ApiResponse<T>>(url);
-      
+
       if (response.data.message) {
         this.handleSuccess(response.data.message);
       } else if (config.successMessage) {
         this.handleSuccess(config.successMessage);
       }
-      
+
       return response.data;
     } catch (error: any) {
       this.handleFailure(error as ApiError);
@@ -251,7 +263,7 @@ export class ApiService {
   }
 
   async deleteWithPayload<T = any>(
-    url: string, 
+    url: string,
     data?: any,
     config: RequestConfig = {}
   ): Promise<ApiResponse<T> | false> {
@@ -259,25 +271,25 @@ export class ApiService {
       // Show confirmation dialog if required
       if (config.confirmationMessage) {
         const confirmed = await showConfirmation(
-          'Confirm Action',
+          "Confirm Action",
           config.confirmationMessage,
-          'Proceed',
-          'Cancel'
+          "Proceed",
+          "Cancel"
         );
-        
+
         if (!confirmed) {
           return false;
         }
       }
 
       const response = await this.axiosInstance.post<ApiResponse<T>>(url, data);
-      
+
       if (response.data.message) {
         this.handleSuccess(response.data.message);
       } else if (config.successMessage) {
         this.handleSuccess(config.successMessage);
       }
-      
+
       return response.data;
     } catch (error: any) {
       this.handleFailure(error as ApiError);
@@ -287,12 +299,12 @@ export class ApiService {
 
   // Utility method to set auth token
   setAuthToken(token: string): void {
-    localStorage.setItem('auth_token', token);
+    localStorage.setItem("accessToken", token);
   }
 
   // Utility method to clear auth token
   clearAuthToken(): void {
-    localStorage.removeItem('auth_token');
+    localStorage.removeItem("accessToken");
   }
 
   // Get axios instance for advanced usage
@@ -301,4 +313,6 @@ export class ApiService {
   }
 }
 
-export const apiService = new ApiService();
+export const apiService = new ApiService(
+  import.meta.env.VITE_API_URL || "/api"
+);
diff --git a/src/types/config.ts b/src/types/config.ts
index 5f2f479..afdea85 100644
--- a/src/types/config.ts
+++ b/src/types/config.ts
@@ -1,3 +1,4 @@
 export interface Config{
     apiBaseUrl: string;
+    cmsApiBaseUrl: string;
 }
\ No newline at end of file
diff --git a/src/vite-env.d.ts b/src/vite-env.d.ts
index 11f02fe..b8cbf51 100644
--- a/src/vite-env.d.ts
+++ b/src/vite-env.d.ts
@@ -1 +1,11 @@
 /// <reference types="vite/client" />
+
+interface ImportMetaEnv {
+  readonly VITE_API_URL: string;
+  readonly VITE_APP_NAME: string;
+  // add more env variables here as needed
+}
+
+interface ImportMeta {
+  readonly env: ImportMetaEnv;
+}


diff --git a/package-lock.json b/package-lock.json
index 29de7db..b4ec44a 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -20,6 +20,7 @@
         "@radix-ui/react-separator": "^1.1.7",
         "@radix-ui/react-slider": "^1.3.5",
         "@radix-ui/react-slot": "^1.2.3",
+        "@radix-ui/react-switch": "^1.2.5",
         "@radix-ui/react-tabs": "^1.1.12",
         "@radix-ui/react-tooltip": "^1.2.7",
         "@tailwindcss/vite": "^4.1.11",
@@ -44,6 +45,7 @@
         "sonner": "^2.0.6",
         "tailwind-merge": "^3.3.1",
         "tailwindcss": "^4.1.11",
+        "uuid": "^11.1.0",
         "yup": "^1.7.0"
       },
       "devDependencies": {
@@ -1887,6 +1889,34 @@
         }
       }
     },
+    "node_modules/@radix-ui/react-switch": {
+      "version": "1.2.5",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-switch/-/react-switch-1.2.5.tgz",
+      "integrity": "sha512-5ijLkak6ZMylXsaImpZ8u4Rlf5grRmoc0p0QeX9VJtlrM4f5m3nCTX8tWga/zOA8PZYIR/t0p2Mnvd7InrJ6yQ==",
+      "dependencies": {
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-primitive": "2.1.3",
+        "@radix-ui/react-use-controllable-state": "1.2.2",
+        "@radix-ui/react-use-previous": "1.1.1",
+        "@radix-ui/react-use-size": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
     "node_modules/@radix-ui/react-tabs": {
       "version": "1.1.12",
       "resolved": "https://registry.npmjs.org/@radix-ui/react-tabs/-/react-tabs-1.1.12.tgz",
@@ -5825,6 +5855,18 @@
         }
       }
     },
+    "node_modules/uuid": {
+      "version": "11.1.0",
+      "resolved": "https://registry.npmjs.org/uuid/-/uuid-11.1.0.tgz",
+      "integrity": "sha512-0/A9rDy9P7cJ+8w1c9WD9V//9Wj15Ce2MPz8Ri6032usz+NfePxx5AcN3bN+r6ZL6jEo066/yNYB3tn4pQEx+A==",
+      "funding": [
+        "https://github.com/sponsors/broofa",
+        "https://github.com/sponsors/ctavan"
+      ],
+      "bin": {
+        "uuid": "dist/esm/bin/uuid"
+      }
+    },
     "node_modules/vite": {
       "version": "7.0.4",
       "resolved": "https://registry.npmjs.org/vite/-/vite-7.0.4.tgz",
diff --git a/package.json b/package.json
index 0f2c912..d939c3c 100644
--- a/package.json
+++ b/package.json
@@ -22,6 +22,7 @@
     "@radix-ui/react-separator": "^1.1.7",
     "@radix-ui/react-slider": "^1.3.5",
     "@radix-ui/react-slot": "^1.2.3",
+    "@radix-ui/react-switch": "^1.2.5",
     "@radix-ui/react-tabs": "^1.1.12",
     "@radix-ui/react-tooltip": "^1.2.7",
     "@tailwindcss/vite": "^4.1.11",
@@ -46,6 +47,7 @@
     "sonner": "^2.0.6",
     "tailwind-merge": "^3.3.1",
     "tailwindcss": "^4.1.11",
+    "uuid": "^11.1.0",
     "yup": "^1.7.0"
   },
   "devDependencies": {
diff --git a/src/App.tsx b/src/App.tsx
index dd7f8f5..0c1281a 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -2,15 +2,16 @@ import { Suspense, useEffect } from "react";
 import { BrowserRouter, Routes, Route } from "react-router-dom";
 import Footer from "./components/Home/Footer";
 import MainNavigation from "./components/Navigation/MainNavigation";
-import "./App.css";
 import dashboardRoutes from "./Routes/DashboardRoutes";
 import cmsRoutes from "./Routes/CMSRoutes";
 import statusRoutes from "./Routes/StatusRoutes";
 import landingRoutes from "./Routes/LandingRoutes";
 import MessageProvider from "@/Context/MessageContext";
+import CMSAuthProvider from "@/Context/CMs/CMSAuthProvider";
 import { MessageContainer } from "@/components/ui/Messages/MessageContainer";
 import { globalMessageService } from "@/services/GlobalMessageService";
 import { useMessage } from "@/hooks/useMessage";
+import "./App.css";
 
 // Component to initialize global messaging
 const MessageInitializer = () => {
@@ -40,39 +41,41 @@ const LoadingFallback = () => (
 function App() {
   return (
     <MessageProvider>
-      <MessageInitializer />
-      <BrowserRouter>
-        <Suspense fallback={<LoadingFallback />}>
-          <Routes>
-            {/* Dashboard Routes */}
-            {dashboardRoutes}
+      <CMSAuthProvider>
+        <MessageInitializer />
+        <BrowserRouter>
+          <Suspense fallback={<LoadingFallback />}>
+            <Routes>
+              {/* Dashboard Routes */}
+              {dashboardRoutes}
 
-            {/* CMS Routes */}
-            {cmsRoutes}
+              {/* CMS Routes */}
+              {cmsRoutes}
 
-            {/* Status Routes */}
-            {statusRoutes}
+              {/* Status Routes */}
+              {statusRoutes}
 
-            {/* Landing Routes with MainLayout */}
-            {landingRoutes.map((route, index) => (
-              <Route
-                key={index}
-                path={route.path}
-                element={
-                  route.withLayout ? (
-                    <MainLayout>{route.element}</MainLayout>
-                  ) : (
-                    route.element
-                  )
-                }
-              >
-                {route.children}
-              </Route>
-            ))}
-          </Routes>
-        </Suspense>
-        <MessageContainer />
-      </BrowserRouter>
+              {/* Landing Routes with MainLayout */}
+              {landingRoutes.map((route, index) => (
+                <Route
+                  key={index}
+                  path={route.path}
+                  element={
+                    route.withLayout ? (
+                      <MainLayout>{route.element}</MainLayout>
+                    ) : (
+                      route.element
+                    )
+                  }
+                >
+                  {route.children}
+                </Route>
+              ))}
+            </Routes>
+          </Suspense>
+          <MessageContainer />
+        </BrowserRouter>
+      </CMSAuthProvider>
     </MessageProvider>
   );
 }
diff --git a/src/Context/CMSAuthProvider.tsx b/src/Context/CMSAuthProvider.tsx
deleted file mode 100644
index c16acf8..0000000
--- a/src/Context/CMSAuthProvider.tsx
+++ /dev/null
@@ -1,40 +0,0 @@
-import React, { createContext, useState } from "react";
-import { cmsService } from "@/services/CMS/cmsAuth.service";
-
-interface CMSAuthContextType {
-  isAuthenticated: boolean;
-  login: (username: string, password: string) => Promise<boolean>;
-  logout: () => void;
-}
-
-const CMSAuthContext = createContext<CMSAuthContextType | undefined>(undefined);
-
-export const CMSAuthProvider: React.FC<{ children: React.ReactNode }> = ({
-  children,
-}) => {
-  const [isAuthenticated, setIsAuthenticated] = useState(false);
-
-  const login = async (username: string, password: string) => {
-    try {
-      await cmsService.login(username, password);
-      setIsAuthenticated(true);
-      return true;
-    } catch {
-      return false;
-    }
-  };
-
-  const logout = async () => {
-    await cmsService.logout();
-    setIsAuthenticated(false);
-  };
-
-  return (
-    <CMSAuthContext.Provider value={{ isAuthenticated, login, logout }}>
-      {children}
-    </CMSAuthContext.Provider>
-  );
-};
-
-export { CMSAuthContext };
-export default CMSAuthProvider;
diff --git a/src/Context/MessageContext.tsx b/src/Context/MessageContext.tsx
index 6895b97..064fa99 100644
--- a/src/Context/MessageContext.tsx
+++ b/src/Context/MessageContext.tsx
@@ -12,7 +12,7 @@ const MessageProvider: React.FC<MessageProviderProps> = ({ children }) => {
 
   const showMessage = useCallback((message: Omit<Message, 'id'>) => {
     const id = Math.random().toString(36).substr(2, 9);
-    const defaultDuration = 5000;
+    const defaultDuration = 1000;
     const duration = message.duration ?? defaultDuration;
     
     const newMessage: Message = {
diff --git a/src/Page-Sections/CMSDashboard/DashboardHome.tsx b/src/Page-Sections/CMSDashboard/DashboardHome.tsx
index d9cb39e..5f1ae04 100644
--- a/src/Page-Sections/CMSDashboard/DashboardHome.tsx
+++ b/src/Page-Sections/CMSDashboard/DashboardHome.tsx
@@ -1,61 +1,77 @@
-import { CMSDashboardCard, CMSDashboardCardContent } from "@/components/cms/CMSDashboardCard";
-import { Edit,  FileText, Globe } from "lucide-react";
+import {
+  CMSDashboardCard,
+  CMSDashboardCardContent,
+} from "@/components/cms/CMSDashboardCard";
+import Button from "@/components/ui/button";
+import { Edit, FileText, Globe } from "lucide-react";
+import { useNavigate } from "react-router-dom";
 
 function DashboardHome() {
-    const dashboardStats = [
-        {
-          title: "Total Pages",
-          value: "24",
-          change: "+3 this week",
-          icon: FileText,
-          color: "text-primary"
-        },
-        {
-          title: "Published",
-          value: "18",
-          change: "75% of total",
-          icon: Globe,
-          color: "text-green-600"
-        },
-        {
-          title: "Drafts",
-          value: "6",
-          change: "25% of total",
-          icon: Edit,
-          color: "text-orange-500"
-        },
-        // {
-        //   title: "Page Views",
-        //   value: "12.4k",
-        //   change: "+15% this month",
-        //   icon: Eye,
-        //   color: "text-blue-600"
-        // }
-      ];
+  const navigate = useNavigate();
+  const dashboardStats = [
+    {
+      title: "Start with a Blueprint",
+      description: "Define your content model using fields and validations.",
+      buttonText: "Create Blueprints",
+      link: "blue-prints",
+      icon: FileText,
+      color: "text-blue-600",
+    },
+    {
+      title: "Create Collections",
 
+      description: "Attach a blueprint and start adding entries.",
+      buttonText: "Create Collections",
+      link: "collections",
+      icon: Globe,
+      color: "text-green-600",
+    },
+    {
+      title: "Explore Fieldtypes",
 
+      buttonText: "Browse Field Types",
+      link: "field-types",
+      description: "See all available inputs you can use.",
+      icon: Edit,
+      color: "text-orange-500",
+    },
+    // {
+    //   title: "Page Views",
+    //   value: "12.4k",
+    //   change: "+15% this month",
+    //   icon: Eye,
+    //   color: "text-blue-600"
+    // }
+  ];
 
   return (
     <div className="space-y-6 p-6">
-       <div>
-       <h1 className="text-3xl font-bold">Dashboard</h1>
-       <p className="text-muted-foreground">Welcome back! Here's what's happening with your website.</p>
-       </div>
-        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
+      <div>
+        <h1 className="text-3xl font-bold">Dashboard</h1>
+        <p className="text-muted-foreground">
+          Welcome back! Here's what's happening with your website.
+        </p>
+      </div>
+      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
         {dashboardStats.map((stat) => (
-          <CMSDashboardCard key={stat.title} className=" hover:shadow-lg transition-all duration-200">
+          <CMSDashboardCard
+            key={stat.title}
+            className=" hover:shadow-lg transition-all duration-200"
+          >
             <CMSDashboardCardContent className="p-6">
               <div className="flex items-center justify-between">
-                <div>
-                  <p className="text-sm font-medium text-muted-foreground">
-                    {stat.title}
-                  </p>
-                  <p className="text-2xl font-bold text-foreground">
+                <div className="space-y-2">
+                  <h1 className="text-lg font-semibold ">{stat.title}</h1>
+                  <p className="text-xs text-gray-400">{stat.description}</p>
+                  {/* <p className="text-2xl font-bold text-foreground">
                     {stat.value}
                   </p>
                   <p className="text-xs text-muted-foreground mt-1">
                     {stat.change}
-                  </p>
+                  </p> */}
+                  <Button variant="primary" onClick={() => navigate(stat.link)}>
+                    {stat.buttonText}
+                  </Button>
                 </div>
                 <div className={`p-3 rounded-lg bg-muted/50 ${stat.color}`}>
                   <stat.icon className="w-5 h-5" />
@@ -66,7 +82,7 @@ function DashboardHome() {
         ))}
       </div>
     </div>
-  )
+  );
 }
 
-export default DashboardHome
+export default DashboardHome;
diff --git a/src/Pages/Dashboard/CMS/CMSPages/CMSLogin.tsx b/src/Pages/Dashboard/CMS/CMSPages/CMSLogin.tsx
index 79fb766..6a7f215 100644
--- a/src/Pages/Dashboard/CMS/CMSPages/CMSLogin.tsx
+++ b/src/Pages/Dashboard/CMS/CMSPages/CMSLogin.tsx
@@ -3,7 +3,7 @@ import { Formik, Form } from "formik";
 import * as Yup from "yup";
 import Button from "@/components/ui/button";
 import { CustomInput } from "@/components/ui/CustomInput";
-import { useCMSAuth } from "@/hooks/useCMSAuth";
+import { useCMSAuth } from "@/hooks/CMS/useCMSAuth";
 
 const validationSchema = Yup.object({
   clientId: Yup.string()
@@ -42,7 +42,7 @@ const CMSLogin = () => {
     >
       <div className="bg-white  space-y-4 flex flex-col items- justify-center py-11 px-11 rounded-lg  w-1/3">
         <div className="justify-center items-center flex">
-          <img src="/images/logo.svg" alt="NBC Logo" width={100} height={150} />
+          <img src="/images/logo.svg" alt="NBC Logo" width={100} height={100} />
         </div>
 
         <h1 className="text-lg font-semibold text-center">NBC CMS Login</h1>
diff --git a/src/Routes/CMSRoutes.tsx b/src/Routes/CMSRoutes.tsx
index 936013c..e10a7bf 100644
--- a/src/Routes/CMSRoutes.tsx
+++ b/src/Routes/CMSRoutes.tsx
@@ -2,7 +2,6 @@ import { lazy } from "react";
 import { Route } from "react-router-dom";
 import CMSLayout from "@/Pages/Dashboard/CMS/CMSLayout";
 import ProtectedCMSRoute from "./ProtectedCMSRoute";
-// Make sure the file exists at the specified path and the filename matches exactly (including case).
 
 
 // Lazy Loading CMS Pages
@@ -13,14 +12,23 @@ const CMSSection = lazy(
   () => import("@/Pages/Dashboard/CMS/CMSPages/Sections")
 );
 const CMSLogin = lazy(() => import("@/Pages/Dashboard/CMS/CMSPages/CMSLogin"));
-// Protected Route Component
-// Moved to ProtectedCMSRoute.tsx
+ 
+const Blueprint = lazy(
+  () => import("@/Pages/Dashboard/CMS/CMSPages/Blueprint")
+);
+const Collection = lazy(
+  () => import("@/Pages/Dashboard/CMS/CMSPages/Collection")
+);
+const Fieldtypes = lazy(
+  () => import("@/Pages/Dashboard/CMS/CMSPages/Fieldtypes")     
+);
+
 
 const cmsRoutes = (
   <>
     <Route path="/cms/login" element={<CMSLogin />} />
     <Route
-      path="/cms/*"
+      path="/cms/"
       element={
         <ProtectedCMSRoute>
           <CMSLayout />
@@ -28,6 +36,9 @@ const cmsRoutes = (
       }
     >
       <Route index element={<CMSDashboard />} />
+      <Route path="blue-prints" element={<Blueprint />} />
+      <Route path="collections" element={<Collection />} />
+      <Route path="field-types" element={<Fieldtypes />} />
       <Route path="sections" element={<CMSSection />} />
     </Route>
   </>
diff --git a/src/Routes/ProtectedCMSRoute.tsx b/src/Routes/ProtectedCMSRoute.tsx
index 6a6b9b5..fa60bf2 100644
--- a/src/Routes/ProtectedCMSRoute.tsx
+++ b/src/Routes/ProtectedCMSRoute.tsx
@@ -1,12 +1,28 @@
 import { Navigate } from "react-router-dom";
-import { useCMSAuth } from "@/hooks/useCMSAuth";
+import { useCMSAuth } from "@/hooks/CMS/useCMSAuth";
 
 interface ProtectedCMSRouteProps {
   children: React.ReactNode;
 }
 
 const ProtectedCMSRoute = ({ children }: ProtectedCMSRouteProps) => {
-  const { isAuthenticated } = useCMSAuth();
+  const { isAuthenticated, isLoading } = useCMSAuth();
+
+  // Show loading spinner while checking authentication
+  if (isLoading) {
+    return (
+      <div
+        style={{
+          display: "flex",
+          justifyContent: "center",
+          alignItems: "center",
+          height: "100vh",
+        }}
+      >
+        <div>Loading...</div>
+      </div>
+    );
+  }
 
   return isAuthenticated ? (
     <>{children}</>
diff --git a/src/components/ui/CustomSelect.tsx b/src/components/ui/CustomSelect.tsx
index d1ee9ab..5c6ab9e 100644
--- a/src/components/ui/CustomSelect.tsx
+++ b/src/components/ui/CustomSelect.tsx
@@ -1,5 +1,12 @@
 import React from "react";
-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
+import {
+  Select,
+  SelectContent,
+  SelectItem,
+  SelectTrigger,
+  SelectValue,
+} from "@/components/ui/select";
+import Button from "@/components/ui/button";
 
 interface SelectOption {
   value: string;
@@ -17,6 +24,18 @@ interface CustomSelectProps {
   label?: string;
   required?: boolean;
   error?: string;
+  // New props for enhanced functionality
+  noOptionsMessage?: string;
+  showActionButton?: boolean;
+  actionButtonText?: string;
+  onActionButtonClick?: () => void;
+  actionButtonVariant?:
+    | "default"
+    | "primary"
+    | "outline"
+    | "secondary"
+    | "ghost"
+    | "link";
 }
 
 export const CustomSelect: React.FC<CustomSelectProps> = ({
@@ -28,8 +47,15 @@ export const CustomSelect: React.FC<CustomSelectProps> = ({
   disabled = false,
   label,
   required = false,
-  error
+  error,
+  noOptionsMessage = "No options available",
+  showActionButton = false,
+  actionButtonText = "Add New",
+  onActionButtonClick,
+  actionButtonVariant = "secondary",
 }) => {
+  const hasOptions = options.length > 0;
+
   return (
     <div className={`w-full space-y-2 ${className}`}>
       {label && (
@@ -38,29 +64,59 @@ export const CustomSelect: React.FC<CustomSelectProps> = ({
           {required && <span className="text-red-500 ml-1">*</span>}
         </label>
       )}
-      <Select 
-        value={value} 
-        onValueChange={onValueChange}
-        disabled={disabled}
-      >
-        <SelectTrigger>
-          <SelectValue placeholder={placeholder} />
-        </SelectTrigger>
-        <SelectContent className="!border-gray-300">
-          {options.map((option) => (
-            <SelectItem 
-              key={option.value} 
-              value={option.value}
-              disabled={option.disabled}
-            >
-              {option.label}
-            </SelectItem>
-          ))}
-        </SelectContent>
-      </Select>
-      {error && (
-        <p className="text-sm text-red-500">{error}</p>
-      )}
+
+      <div className="flex gap-2">
+        <Select value={value} onValueChange={onValueChange} disabled={disabled}>
+          <SelectTrigger className="flex-1">
+            <SelectValue
+              placeholder={hasOptions ? placeholder : noOptionsMessage}
+            />
+          </SelectTrigger>
+          <SelectContent className="!border-gray-300">
+            {hasOptions ? (
+              options.map((option) => (
+                <SelectItem
+                  key={option.value}
+                  value={option.value}
+                  disabled={option.disabled}
+                >
+                  {option.label}
+                </SelectItem>
+              ))
+            ) : (
+              <div className="px-2 py-1.5 text-sm text-muted-foreground text-center">
+                {noOptionsMessage}
+                {showActionButton && onActionButtonClick && (
+                  <div className="mt-2">
+                    <Button
+                      type="button"
+                      variant={actionButtonVariant}
+                      onClick={onActionButtonClick}
+                      size="sm"
+                      className="w-full"
+                    >
+                      {actionButtonText}
+                    </Button>
+                  </div>
+                )}
+              </div>
+            )}
+          </SelectContent>
+        </Select>
+
+        {showActionButton && onActionButtonClick && hasOptions && (
+          <Button
+            type="button"
+            variant={actionButtonVariant}
+            onClick={onActionButtonClick}
+            className="shrink-0"
+          >
+            {actionButtonText}
+          </Button>
+        )}
+      </div>
+
+      {error && <p className="text-sm text-red-500">{error}</p>}
     </div>
   );
-};
\ No newline at end of file
+};
diff --git a/src/components/ui/button.tsx b/src/components/ui/button.tsx
index 93606c7..74072a9 100644
--- a/src/components/ui/button.tsx
+++ b/src/components/ui/button.tsx
@@ -16,7 +16,9 @@ type ButtonProps = {
     | "lightOutline"
     | "iconOutline"
     | "iconRounded"
-    | "dropdown";
+    | "dropdown"
+    | "destructive" 
+    ;
   size?: "xs" | "sm" | "md" | "lg" | "xl";
   type?: "button" | "submit" | "reset";
   disabled?: boolean;
@@ -50,6 +52,8 @@ const Button = ({
   const variants = {
     primary:
       "bg-nbc-dark-950 text-white shadow-sm hover:shadow-lg hover:bg-nbc-dark-700 transition-colors duration-300",
+    destructive:
+      "bg-red-500 text-white shadow-sm hover:shadow-lg hover:bg-red-700 transition-colors duration-300",
     secondary:
       "bg-gray-50 text-nbc-dark-950 hover:bg-gray-100 transition-colors duration-300 border border-gray-200",
     success:
diff --git a/src/data/cmsNavigationData.ts b/src/data/cmsNavigationData.ts
index efdfccb..cb63a65 100644
--- a/src/data/cmsNavigationData.ts
+++ b/src/data/cmsNavigationData.ts
@@ -1,43 +1,53 @@
 import type { NavigationItem } from "@/components/cms/Sidebar";
-import { BarChart3, FileText, Home, Settings, Users } from "lucide-react";
+import { Edit, FileText, Globe, LayoutDashboard } from "lucide-react";
 
 export const cmsNavigationData: NavigationItem[] = [
   {
     label: "Dashboard",
-    icon: Home,
-    href: "/dashboard"
+    icon: LayoutDashboard,
+    href: "/cms",
   },
+  // {
+  //   label: "Content Management",
+  //   icon: FileText,
+  //   subItems: [
+  //     { label: "All Posts", href: "/content/posts" },
+  //     { label: "New Post", href: "/content/new" },
+  //     { label: "Categories", href: "/content/categories" },
+  //     { label: "Tags", href: "/content/tags" }
+  //   ]
+  // },
+  // {
+  //   label: "Analytics",
+  //   icon: BarChart3,
+  //   subItems: [
+  //     { label: "Overview", href: "/analytics/overview" },
+  //     { label: "Traffic", href: "/analytics/traffic" },
+  //     { label: "Conversions", href: "/analytics/conversions" }
+  //   ]
+  // },
   {
-    label: "Content Management",
-    icon: FileText,
-    subItems: [
-      { label: "All Posts", href: "/content/posts" },
-      { label: "New Post", href: "/content/new" },
-      { label: "Categories", href: "/content/categories" },
-      { label: "Tags", href: "/content/tags" }
-    ]
+    label: "Collections",
+    icon: Globe,
+    href: "/cms/collections",
   },
   {
-    label: "Analytics",
-    icon: BarChart3,
-    subItems: [
-      { label: "Overview", href: "/analytics/overview" },
-      { label: "Traffic", href: "/analytics/traffic" },
-      { label: "Conversions", href: "/analytics/conversions" }
-    ]
+    label: "Blueprints",
+    icon: FileText,
+    href: "/cms/blue-prints",
   },
   {
-    label: "Users",
-    icon: Users,
-    href: "/users"
+    label: "Fieldtypes",
+    icon: Edit,
+    href: "/cms/field-types",
   },
-  {
-    label: "Settings",
-    icon: Settings,
-    subItems: [
-      { label: "General", href: "/settings/general" },
-      { label: "Security", href: "/settings/security" },
-      { label: "Integrations", href: "/settings/integrations" }
-    ]
-  }
-];
\ No newline at end of file
+  // {
+  //   label: "Settings",
+  //   icon: Settings,
+  //   subItems: [
+  //     { label: "General", href: "/settings/general" },
+  //     { label: "Security", href: "/settings/security" },
+  //     { label: "Integrations", href: "/settings/integrations" }
+  //   ]
+  // }
+];
diff --git a/src/hooks/useCMSAuth.ts b/src/hooks/useCMSAuth.ts
deleted file mode 100644
index 9f87bd7..0000000
--- a/src/hooks/useCMSAuth.ts
+++ /dev/null
@@ -1,30 +0,0 @@
-import { cmsService } from "@/services/CMS/cmsAuth.service";
-
-
-export const useCMSAuth = () => {
-  const login = async (
-    username: string,
-    password: string
-  ): Promise<boolean> => {
-    try {
-      const result = await cmsService.login(username, password);
-      if (result) {
-        return true;
-      }
-      return false;
-    } catch {
-      // Error message is already handled by API service
-      return false;
-    }
-  };
-
-  const logout = async (): Promise<void> => {
-    try {
-      await cmsService.logout();
-    } catch {
-      // Error handling is done by API service
-    }
-  };
-
-  return { login, logout };
-};
diff --git a/src/main.tsx b/src/main.tsx
index e85841b..cc576cb 100644
--- a/src/main.tsx
+++ b/src/main.tsx
@@ -3,7 +3,7 @@ import { createRoot } from "react-dom/client";
 import "./index.css";
 import "react-quill-new/dist/quill.snow.css";
 import App from "./App.tsx";
-import CMSAuthProvider from "./Context/CMSAuthProvider.tsx";
+import CMSAuthProvider from "./Context/CMs/CMSAuthProvider.tsx";
 
 createRoot(document.getElementById("root")!).render(
   <StrictMode>
diff --git a/src/services/Api.service.ts b/src/services/Api.service.ts
index 78db9c5..8776a04 100644
--- a/src/services/Api.service.ts
+++ b/src/services/Api.service.ts
@@ -11,28 +11,48 @@ export class ApiService {
   private axiosInstance: AxiosInstance;
   private readonly PRECONDITION_FAILED = 428;
   private readonly STATUS_ERROR_THRESHOLD = 300;
+  
   constructor(baseURL: string) {
     this.axiosInstance = axios.create({
       baseURL,
       timeout: 30000,
-      withCredentials:true,
+      withCredentials: true,
       headers: {
         "Content-Type": "application/json",
-        
       },
     });
 
     this.setupInterceptors();
+    
+    // Initialize token immediately after setup
+    this.initializeAuthToken();
+    
+    // Make this instance globally available for token sync
+    if (typeof window !== 'undefined') {
+      (window as any).apiService = this;
+    }
+  }
+
+  // Add this method to initialize token on service creation
+  private initializeAuthToken(): void {
+    const token = localStorage.getItem("accessToken");
+    if (token) {
+      // Set the authorization header immediately
+      this.axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;
+    }
   }
 
   private setupInterceptors(): void {
     // Request interceptor
     this.axiosInstance.interceptors.request.use(
       (config) => {
-        // Add auth token if available
+        // Always get the latest token from localStorage
         const token = localStorage.getItem("accessToken");
         if (token) {
           config.headers.Authorization = `Bearer ${token}`;
+        } else {
+          // Remove authorization header if no token
+          delete config.headers.Authorization;
         }
 
         // Add request timestamp for debugging
@@ -84,6 +104,8 @@ export class ApiService {
         // Handle token expiration
         if (error.response?.status === 401) {
           localStorage.removeItem("accessToken");
+          // Clear authorization header
+          delete this.axiosInstance.defaults.headers.common['Authorization'];
           window.location.href = "/login";
         }
 
@@ -297,14 +319,18 @@ export class ApiService {
     }
   }
 
-  // Utility method to set auth token
+  // Update setAuthToken method
   setAuthToken(token: string): void {
     localStorage.setItem("accessToken", token);
+    // Set the authorization header on the axios instance
+    this.axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;
   }
 
-  // Utility method to clear auth token
+  // Update clearAuthToken method
   clearAuthToken(): void {
     localStorage.removeItem("accessToken");
+    // Remove authorization header
+    delete this.axiosInstance.defaults.headers.common['Authorization'];
   }
 
   // Get axios instance for advanced usage
diff --git a/src/services/CMS/cmsAuth.service.ts b/src/services/CMS/cmsAuth.service.ts
index 938f637..1086a2a 100644
--- a/src/services/CMS/cmsAuth.service.ts
+++ b/src/services/CMS/cmsAuth.service.ts
@@ -1,37 +1,96 @@
 import config from "@/config";
+import { ApiService } from "../Api.service";
+
+const cmsApiService = new ApiService(config.cmsApiBaseUrl);
+
+// Initialize token on service creation
+const initializeToken = () => {
+  const token = localStorage.getItem("accessToken"); // Use consistent key
+  if (token) {
+    cmsApiService.setAuthToken(token);
+  }
+};
+
+// Call initialization
+initializeToken();
 
 export const cmsService = {
   login: async (username: string, password: string) => {
-    const response = await fetch(`${config.cmsApiBaseUrl}/auth/token`, {
-      method: "POST",
-      credentials: "include",
-      headers: {
-        "Content-Type": "application/json",
-      },
-      body: JSON.stringify({
+    const response = await cmsApiService.post(
+      "/auth/token",
+      {
         clientId: username,
         clientSecret: password,
-      }),
-    });
+      },
+      {
+        successMessage: "Login successful! Welcome to NBC CMS.",
+      }
+    );
 
-    if (!response.ok) {
-      throw new Error(`Login failed: ${response.statusText}`);
+    // Store the token if provided
+    if (response.data?.token || response.data?.access_token || response?.accessToken 
+    ) {
+
+      console.log("Response Data inside if",response?.accessToken )
+      const token = response?.accessToken || response.data.token || response.data.access_token  ;
+      console.log("Token received:", token);
+      // Use only one consistent token key
+      localStorage.setItem("accessToken", token);
+      cmsApiService.setAuthToken(token);
+      
+      // Also set token for the main apiService if it exists
+      if (typeof window !== 'undefined' && (window as any).apiService) {
+        (window as any).apiService.setAuthToken(token);
+      }
     }
 
-    return await response.json();
+    return response.data;
   },
+
   logout: async () => {
-    const response = await fetch(`${config.cmsApiBaseUrl}/auth/logout`, {
-      method: "POST",
-      credentials: "include",
-      headers: {
-        "Content-Type": "application/json",
-      },
-      body: JSON.stringify({}),
-    });
+    try {
+      await cmsApiService.post("/auth/logout", {});
+    } catch (error) {
+      // Continue with logout even if server call fails
+      console.error("Server logout failed:", error);
+    } finally {
+      // Clear all token storage
+      localStorage.removeItem("accessToken");
+      localStorage.removeItem("cmsAccessToken"); // Clean up old key if exists
+      cmsApiService.clearAuthToken();
+      
+      // Also clear token for the main apiService if it exists
+      if (typeof window !== 'undefined' && (window as any).apiService) {
+        (window as any).apiService.clearAuthToken();
+      }
+    }
+  },
+
+  // Check if user is authenticated
+  isAuthenticated: () => {
+    return !!localStorage.getItem("accessToken");
+  },
+
+  // Get stored token
+  getToken: () => {
+    return localStorage.getItem("accessToken");
+  },
+
+  // Verify token with server (optional - implement if your API supports it)
+  verifyToken: async () => {
+    try {
+      const token = localStorage.getItem("accessToken");
+      if (!token) return false;
 
-    if (!response.ok) {
-      throw new Error(`Logout failed: ${response.statusText}`);
+      // Make a simple authenticated request to verify token
+      await cmsApiService.get("/auth/verify"); // Adjust endpoint as needed
+      return true;
+    } catch {
+      // Token is invalid, clear it
+      localStorage.removeItem("accessToken");
+      localStorage.removeItem("cmsAccessToken"); // Clean up old key if exists
+      cmsApiService.clearAuthToken();
+      return false;
     }
   },
 };
diff --git a/src/types/api.ts b/src/types/api.ts
index a2410ad..1842a52 100644
--- a/src/types/api.ts
+++ b/src/types/api.ts
@@ -3,6 +3,7 @@ export interface ApiResponse<T = any> {
   status_code?: number;
   message?: string;
   success?: boolean;
+  accessToken?: string;
 }
 
 export interface ApiError {
