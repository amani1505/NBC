
diff --git a/src/app/(PageSections)/Auth/LoginPageSection.tsx b/src/app/(PageSections)/Auth/LoginPageSection.tsx
index 1a2f334..320f6b6 100644
--- a/src/app/(PageSections)/Auth/LoginPageSection.tsx
+++ b/src/app/(PageSections)/Auth/LoginPageSection.tsx
@@ -41,7 +41,7 @@ function LoginPageSection() {
   };
 
   return (
-    <div className="w-full space-y-6">
+    <div className="w-full space-y-6 bg-white rounded-lg px-10 pb-7 shadow">
       {/* Logo Section */}
       <div className="flex justify-center items-center">
         <Image
diff --git a/src/app/(PageSections)/Auth/SignupPageSection.tsx b/src/app/(PageSections)/Auth/SignupPageSection.tsx
index 24953b4..d0974e4 100644
--- a/src/app/(PageSections)/Auth/SignupPageSection.tsx
+++ b/src/app/(PageSections)/Auth/SignupPageSection.tsx
@@ -106,7 +106,7 @@ function SignupPageSection() {
   };
 
   return (
-    <div className="w-full space-y-6">
+    <div className="w-full space-y-6  bg-white rounded-lg px-10 pb-7 shadow" >
       {/* Logo Section */}
       <div className="flex justify-center items-center">
         <Image
diff --git a/src/app/(PageSections)/Dashboard/EventPageSection/EventPageSection.tsx b/src/app/(PageSections)/Dashboard/EventPageSection/EventPageSection.tsx
index 298853f..032bcf5 100644
--- a/src/app/(PageSections)/Dashboard/EventPageSection/EventPageSection.tsx
+++ b/src/app/(PageSections)/Dashboard/EventPageSection/EventPageSection.tsx
@@ -1,5 +1,6 @@
 import DetailedCard from "@/components/shared/Card/DetailedCard";
 import React from "react";
+import EventFiltering from "./components/EventFiltering";
 
 function EventPageSection() {
   const events = [
@@ -46,12 +47,17 @@ function EventPageSection() {
     },
   ];
   return (
-    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6 mb-8">
-      {events.map((event, index) => (
-        <div key={index}>
-          <DetailedCard {...event} />
-        </div>
-      ))}
+    <div className="space-y-8">
+      <div>
+        <EventFiltering />
+      </div>
+      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6 mb-8">
+        {events.map((event, index) => (
+          <div key={index}>
+            <DetailedCard {...event} />
+          </div>
+        ))}
+      </div>
     </div>
   );
 }
diff --git a/src/app/(Pages)/auth/layout.tsx b/src/app/(Pages)/auth/layout.tsx
index e03fb7d..acd1521 100644
--- a/src/app/(Pages)/auth/layout.tsx
+++ b/src/app/(Pages)/auth/layout.tsx
@@ -2,37 +2,63 @@ import React from "react";
 
 function layout({ children }: { children: React.ReactNode }) {
   return (
-    <div className="min-h-screen flex flex-col lg:flex-row items-center justify-center">
-      {/* Left Side - Hero Section */}
-      <div
-        className="w-full hidden lg:w-1/2 min-h-[40vh] lg:min-h-screen lg:flex flex-col items-center justify-center text-white relative"
-        style={{
-          backgroundImage:
-            "linear-gradient(-225deg, rgba(221, 10, 20, 0.3), rgba(33, 58, 137, 0.9)), url(/images/marathon-hero.png)",
-          backgroundSize: "cover",
-          backgroundPosition: "center",
-          backgroundRepeat: "no-repeat",
-        }}
-      >
-        <div className="px-6 sm:px-8 md:px-10 lg:px-12 xl:px-16 text-center ">
-          <h1 className="heading-1 text-2xl sm:text-3xl md:text-4xl lg:text-5xl xl:text-6xl font-bold mb-4 leading-tight">
-            Your Gateway to Events
-          </h1>
-          <p className="body-medium text-sm sm:text-base md:text-lg opacity-90 leading-relaxed">
-            Sign in or create an account to manage your events, register as a
-            participant, and stay connected with upcoming activities.
-          </p>
-        </div>
-      </div>
+    // <div className="min-h-screen flex flex-col lg:flex-row items-center justify-center">
+    //   {/* Left Side - Hero Section */}
+    //   <div
+    //     className="w-full hidden lg:w-1/2 min-h-[40vh] lg:min-h-screen lg:flex flex-col items-center justify-center text-white relative"
+    //     style={{
+    //       backgroundImage:
+    //         "linear-gradient(-225deg, rgba(221, 10, 20, 0.3), rgba(33, 58, 137, 0.9)), url(/images/marathon-hero.png)",
+    //       backgroundSize: "cover",
+    //       backgroundPosition: "center",
+    //       backgroundRepeat: "no-repeat",
+    //     }}
+    //   >
+    //     <div className="px-6 sm:px-8 md:px-10 lg:px-12 xl:px-16 text-center ">
+    //       <h1 className="heading-1 text-2xl sm:text-3xl md:text-4xl lg:text-5xl xl:text-6xl font-bold mb-4 leading-tight">
+    //         Your Gateway to Events
+    //       </h1>
+    //       <p className="body-medium text-sm sm:text-base md:text-lg opacity-90 leading-relaxed">
+    //         Sign in or create an account to manage your events, register as a
+    //         participant, and stay connected with upcoming activities.
+    //       </p>
+    //     </div>
+    //   </div>
+
+    //   {/* Right Side - Form Section */}
+    //   <div className="w-full lg:w-1/2 flex items-center justify-center bg-white min-h-[60vh] lg:min-h-screen">
+    //     <div className="w-full max-w-2xl px-6 sm:px-8 py-8 lg:py-12">
+    //       {children}
+    //     </div>
+    //   </div>
+    // </div>
 
-      {/* Right Side - Form Section */}
-      <div className="w-full lg:w-1/2 flex items-center justify-center bg-white min-h-[60vh] lg:min-h-screen">
-        <div className="w-full max-w-2xl px-6 sm:px-8 py-8 lg:py-12">
-          {children}
+    <div
+      className="min-h-screen m-w-screen "
+      style={{
+        backgroundImage:
+          "linear-gradient(-225deg, rgba(221, 10, 20, 0.3), rgba(33, 58, 137, 0.9)), url(/images/marathon-hero.png)",
+        backgroundSize: "cover",
+        backgroundPosition: "center",
+        backgroundRepeat: "no-repeat",
+      }}
+    >
+      <div className="flex justify-center items-center  min-h-screen gap-5 px-10">
+        <div className="text-white w-full">
+          <div className="text-center ">
+            <h1 className="heading-1 text-2xl sm:text-3xl md:text-4xl lg:text-5xl xl:text-6xl font-bold mb-4 leading-tight">
+              Your Gateway to Events
+            </h1>
+            <p className="body-medium text-sm sm:text-base md:text-lg opacity-90 leading-relaxed">
+              Sign in or create an account to manage your events, register as a
+              participant, and stay connected with upcoming activities.
+            </p>
+          </div>
         </div>
+        <div className="w-1/2 ">{children}</div>
       </div>
     </div>
   );
 }
 
-export default layout;
\ No newline at end of file
+export default layout;
diff --git a/src/app/(Pages)/dashboard/DashboardClientLayout.tsx b/src/app/(Pages)/dashboard/DashboardClientLayout.tsx
index 5fa39f4..0d74cb4 100644
--- a/src/app/(Pages)/dashboard/DashboardClientLayout.tsx
+++ b/src/app/(Pages)/dashboard/DashboardClientLayout.tsx
@@ -4,7 +4,9 @@ import Sidebar from "@/components/layout/Sidebar";
 import { Button } from "@/components/ui/button";
 import { FormInput } from "@/components/ui/form-input";
 import { NavigationItemData } from "@/data/DashboardRoutes";
+import { useAuth } from "@/hooks/use-auth";
 import { Bell, Menu, MessageSquareMore, Search, User } from "lucide-react";
+import Image from "next/image";
 import { useState } from "react";
 
 interface DashboardClientProps {
@@ -18,6 +20,8 @@ export default function DashboardClientLayout({
 }: DashboardClientProps) {
   const [isCollapsed, setIsCollapsed] = useState(false);
 
+  const { user } = useAuth();
+
   const toggleCollapsed = () => {
     setIsCollapsed(!isCollapsed);
   };
@@ -43,7 +47,7 @@ export default function DashboardClientLayout({
         }}
       />
       <main className="flex flex-col flex-1 min-w-0 overflow-hidden">
-        <div className="border-b p-4 sticky top-0 z-[9999999] bg-white flex items-center gap-3 " >
+        <div className="border-b p-4 sticky top-0 z-[9999999] bg-white flex items-center gap-3 ">
           <Button
             variant="ghost"
             className="hidden lg:flex h-8 w-8 p-0 shrink-0"
@@ -52,56 +56,67 @@ export default function DashboardClientLayout({
             <Menu className="w-4 h-4" />
           </Button>
 
-
-
-
           <div className="flex justify-between  w-full items-center">
-          <div>
-            {/* Search area  */}
-            <div className="">
-              <FormInput
-                type="search"
-                placeholder="Search..."
-                className="w-full"
-                leftIcon={<Search className="h-4 w-4 text-gray-500" />}
-              />
-            </div>
-          </div>
-          <div className="">
-            <div className="flex items-center space-x-4">
-              <div>
-                <Button className="w-8 h-8" variant="outline" size="icon">
-                  <MessageSquareMore />
-                </Button>
-              </div>
-              <div>
-                <Button  className="w-8 h-8" variant="outline" size="icon">
-                  <Bell />
-                </Button>
+            <div>
+              {/* Search area  */}
+              <div className="">
+                <FormInput
+                  type="search"
+                  placeholder="Search..."
+                  className="w-full"
+                  leftIcon={<Search className="h-4 w-4 text-gray-500" />}
+                />
               </div>
-              <div>
-                <div className="flex space-x-1">
-                  <div>
-                    <div className="w-10 h-10 rounded-full bg-gray-100 flex items-center justify-center p-2 text-nbc-dark-950">
-                      <User className="w-5 h-5" />
+            </div>
+            <div className="">
+              <div className="flex items-center space-x-4">
+                <div>
+                  <Button className="w-8 h-8" variant="outline" size="icon">
+                    <MessageSquareMore />
+                  </Button>
+                </div>
+                <div>
+                  <Button className="w-8 h-8" variant="outline" size="icon">
+                    <Bell />
+                  </Button>
+                </div>
+                <div>
+                  <div className="flex space-x-1">
+                    <div>
+                      <div className="w-10 h-10 rounded-full bg-gray-100 flex items-center justify-center p-2 text-nbc-dark-950">
+                        {user?.avatar ? (
+                          <>
+                          <Image
+                            src={user?.avatar}
+                            alt="User Avatar"
+                            width={40}
+                            height={40}
+                            className="w-6 h-6 rounded-full object-cover"
+                          />
+                          
+                          
+                          </>
+                        ) : (
+                          <>
+                            <User className="w-5 h-5" />
+                          </>
+                        )}
+                      </div>
+                    </div>
+                    <div className="text-xs mt-1">
+                      <p className="font-[600]">
+                        {user?.firstName + " " + user?.lastName}
+                      </p>
+                      <p>{user?.email}</p>
                     </div>
-                  </div>
-                  <div className="text-xs mt-1">
-                    <p className="font-[600]">John Deo</p>
-                    <p>john@gmail.com</p>
                   </div>
                 </div>
               </div>
             </div>
           </div>
         </div>
-
-
-        </div>
-        <div className="flex-1 px-7 py-5 overflow-y-auto">
-          {children}
-        </div>
+        <div className="flex-1 px-7 py-5 overflow-y-auto">{children}</div>
       </main>
     </div>
   );
-}
\ No newline at end of file
+}
diff --git a/src/components/guards/AuthGuard.tsx b/src/components/guards/AuthGuard.tsx
index 2426134..430cd79 100644
--- a/src/components/guards/AuthGuard.tsx
+++ b/src/components/guards/AuthGuard.tsx
@@ -19,21 +19,20 @@ export const AuthGuard: React.FC<AuthGuardProps> = ({
   const router = useRouter();
   const pathname = usePathname();
 
-  console.log("AuthGuard - isAuthenticated:", isAuthenticated, "isLoading:", isLoading, "pathname:", pathname);
   useEffect(() => {
     if (!isLoading) {
       if (requireAuth && !isAuthenticated) {
         // Store the attempted URL to redirect after login
         // Only store dashboard routes, not auth routes
-        if (pathname.startsWith('/dashboard')) {
-          sessionStorage.setItem('redirectAfterLogin', pathname);
+        if (pathname.startsWith("/dashboard")) {
+          sessionStorage.setItem("redirectAfterLogin", pathname);
         }
         router.push(redirectTo);
       } else if (!requireAuth && isAuthenticated) {
         // If user is logged in but trying to access auth pages, redirect to dashboard
-        const savedRedirect = sessionStorage.getItem('redirectAfterLogin');
-        if (savedRedirect && savedRedirect.startsWith('/dashboard')) {
-          sessionStorage.removeItem('redirectAfterLogin');
+        const savedRedirect = sessionStorage.getItem("redirectAfterLogin");
+        if (savedRedirect && savedRedirect.startsWith("/dashboard")) {
+          sessionStorage.removeItem("redirectAfterLogin");
           router.push(savedRedirect);
         } else {
           router.push("/dashboard");
@@ -62,4 +61,4 @@ export const AuthGuard: React.FC<AuthGuardProps> = ({
   }
 
   return <>{children}</>;
-};
\ No newline at end of file
+};
diff --git a/src/components/layout/CustomLinks.tsx b/src/components/layout/CustomLinks.tsx
index 80da869..830f9f8 100644
--- a/src/components/layout/CustomLinks.tsx
+++ b/src/components/layout/CustomLinks.tsx
@@ -44,8 +44,8 @@ const CustomLinks: React.FC<CustomLinksProp> = ({
               <Link
                 href={
                   link.id === "/"
-                    ? "/dashboard/insurance"
-                    : `/dashboard/insurance/${link.id}`
+                    ? basePath
+                    : `${basePath}/${link.id}`
                 }
                 className={`capitalize py-2 transition-all ease-in duration-300 whitespace-nowrap
                 hover:text-primary-950 hover:border-b-[2px] hover:border-primary-950
diff --git a/src/providers/auth.provider.tsx b/src/providers/auth.provider.tsx
index 7555e9a..d27bd4e 100644
--- a/src/providers/auth.provider.tsx
+++ b/src/providers/auth.provider.tsx
@@ -37,6 +37,7 @@ export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
         // Optionally verify token by fetching fresh user data
         try {
           const freshUser = await authService.getProfile();
+         
           setUser(freshUser);
           localStorage.setItem("user", JSON.stringify(freshUser));
         } catch (error) {
diff --git a/src/services/auth.service.ts b/src/services/auth.service.ts
index 0d5a978..d3f949f 100644
--- a/src/services/auth.service.ts
+++ b/src/services/auth.service.ts
@@ -14,7 +14,7 @@ class AuthService extends BaseApiService {
     LOGOUT: "/auth/logout",
     REFRESH: "/auth/refresh",
     CHANGE_PASSWORD: "/auth/change-password",
-    PROFILE: "authenticate",
+    PROFILE: "account",
   };
 
   async login(data: LoginDataI): Promise<{ id_token: string }> {
@@ -91,7 +91,7 @@ class AuthService extends BaseApiService {
   async getProfile(): Promise<UserI> {
     try {
       const response = await this.get(this.AUTH_ENDPOINTS.PROFILE);
-      return response.data;
+      return response as UserI;
     } catch (error) {
       console.error("Get profile error:", error);
       throw error;



diff --git a/src/app/(PageSections)/Auth/SignupPageSection.tsx b/src/app/(PageSections)/Auth/SignupPageSection.tsx
index d0974e4..721b3df 100644
--- a/src/app/(PageSections)/Auth/SignupPageSection.tsx
+++ b/src/app/(PageSections)/Auth/SignupPageSection.tsx
@@ -93,6 +93,8 @@ function SignupPageSection() {
       lastName: values.lastName,
       email: values.email,
       password: values.password,
+      // confirmPassword: values.confirmPassword,
+      // termsAccepted: true,
     };
 
     // console.log("Form submitted:", data);
diff --git a/src/app/(PageSections)/Landing/GuidelinesPageSection.tsx b/src/app/(PageSections)/Landing/GuidelinesPageSection.tsx
index 7b5a71d..101b543 100644
--- a/src/app/(PageSections)/Landing/GuidelinesPageSection.tsx
+++ b/src/app/(PageSections)/Landing/GuidelinesPageSection.tsx
@@ -1,4 +1,3 @@
-import Component from "@/components/comp-485";
 import HeroSection from "@/components/shared/Hero/HeroSection";
 import React from "react";
 
diff --git a/src/app/(PageSections)/Landing/sections/EventSections/MarathonRouteSection.tsx b/src/app/(PageSections)/Landing/sections/EventSections/MarathonRouteSection.tsx
index 15f5b65..c109eb3 100644
--- a/src/app/(PageSections)/Landing/sections/EventSections/MarathonRouteSection.tsx
+++ b/src/app/(PageSections)/Landing/sections/EventSections/MarathonRouteSection.tsx
@@ -1,54 +1,49 @@
 "use client";
 import { RouteMap } from "@/components/shared/MarathonRoutes/RouteMap";
-import { RouteSelector } from "@/components/shared/MarathonRoutes/RouteSelector";
+import {
+  RouteI,
+  RouteSelector,
+} from "@/components/shared/MarathonRoutes/RouteSelector";
 import { useRouteFilters } from "@/hooks/useRouteFilters";
-import { title } from "process";
+
 import React, { useState } from "react";
 
-const routeData = [
+const routeData: RouteI[] = [
   {
     id: "5km",
     distance: 5,
     label: "5 Kilometers",
-    difficulty: "easy",
-    terrain: "road",
     description: "NBC Dodoma Marathon 2025",
-    price:"45000",
-    duration: "short",
-    image:"/images/ticket-1.png"
+    price: "45000",
+    image: "/images/ticket-1.png",
   },
   {
     id: "10km",
     distance: 10,
     label: "10 Kilometers",
-    difficulty: "moderate",
+
     description: "NBC Dodoma Marathon 2025",
-    terrain: "mixed",
-    price:"45000",
-    duration: "medium",
-    image:"/images/ticket-2.png"
+
+    price: "45000",
+
+    image: "/images/ticket-2.png",
   },
   {
     id: "21km",
     distance: 21,
     label: "21 Kilometers",
-    difficulty: "challenging",
+
     description: "NBC Dodoma Marathon 2025",
-    terrain: "mixed",
-    price:"45000",
-    duration: "long",
-    image:"/images/ticket-3.png"
+    price: "45000",
+    image: "/images/ticket-3.png",
   },
   {
     id: "41km",
     distance: 41,
     label: "41 Kilometers",
-    difficulty: "challenging",
-    description: "NBC Dodoma Marathon 2025",
-    terrain: "trail",
-    price:"45000",
-    image:"/images/ticket-4.png",
-    duration: "long",
+ description: "NBC Dodoma Marathon 2025",
+    price: "45000",
+    image: "/images/ticket-4.png",
   },
 ];
 
@@ -67,7 +62,7 @@ function MarathonRouteSection() {
           {/* Left Sidebar */}
           <div className="lg:col-span-1 space-y-6 overflow-y-auto">
             <RouteSelector
-              routes={filteredRoutes}
+              routes={filteredRoutes.filter((route): route is RouteI => route.description !== undefined)}
               selectedRoute={selectedRoute}
               onRouteSelect={handleRouteSelect}
             />
@@ -86,14 +81,14 @@ function MarathonRouteSection() {
                     id: fallback.id,
                     name: fallback.label,
                     distance: fallback.distance,
-                    terrain: fallback.terrain,
+                    // terrain: fallback.terrain,
                   };
                 }
                 return {
                   id: found.id,
                   name: found.label,
                   distance: found.distance,
-                  terrain: found.terrain,
+                  // terrain: found.terrain,
                 };
               })()}
               className="h-full"
diff --git a/src/app/(PageSections)/Landing/sections/HomeSections/Parts/Faq.tsx b/src/app/(PageSections)/Landing/sections/HomeSections/Parts/Faq.tsx
index 5cdc6fb..6294bb2 100644
--- a/src/app/(PageSections)/Landing/sections/HomeSections/Parts/Faq.tsx
+++ b/src/app/(PageSections)/Landing/sections/HomeSections/Parts/Faq.tsx
@@ -25,10 +25,10 @@ export interface SideTabConfig {
 
 
 
-interface TabComponentProps {
-  articles: Article[];
-  loading: boolean;
-}
+// interface TabComponentProps {
+//   articles: Article[];
+//   loading: boolean;
+// }
 
 const tabs: SideTabConfig[] = [
   { name: "General", component: GeneralQuestions },
diff --git a/src/app/(Pages)/dashboard/DashboardClientLayout.tsx b/src/app/(Pages)/dashboard/DashboardClientLayout.tsx
index 0d74cb4..0abc34a 100644
--- a/src/app/(Pages)/dashboard/DashboardClientLayout.tsx
+++ b/src/app/(Pages)/dashboard/DashboardClientLayout.tsx
@@ -7,7 +7,7 @@ import { NavigationItemData } from "@/data/DashboardRoutes";
 import { useAuth } from "@/hooks/use-auth";
 import { Bell, Menu, MessageSquareMore, Search, User } from "lucide-react";
 import Image from "next/image";
-import { useState } from "react";
+import { useEffect, useState } from "react";
 
 interface DashboardClientProps {
   children: React.ReactNode;
@@ -20,7 +20,11 @@ export default function DashboardClientLayout({
 }: DashboardClientProps) {
   const [isCollapsed, setIsCollapsed] = useState(false);
 
-  const { user } = useAuth();
+  const { user, getProfile } = useAuth();
+
+  useEffect(() => {
+    getProfile();
+  }, []);
 
   const toggleCollapsed = () => {
     setIsCollapsed(!isCollapsed);
@@ -86,15 +90,13 @@ export default function DashboardClientLayout({
                       <div className="w-10 h-10 rounded-full bg-gray-100 flex items-center justify-center p-2 text-nbc-dark-950">
                         {user?.avatar ? (
                           <>
-                          <Image
-                            src={user?.avatar}
-                            alt="User Avatar"
-                            width={40}
-                            height={40}
-                            className="w-6 h-6 rounded-full object-cover"
-                          />
-                          
-                          
+                            <Image
+                              src={user?.avatar}
+                              alt="User Avatar"
+                              width={40}
+                              height={40}
+                              className="w-6 h-6 rounded-full object-cover"
+                            />
                           </>
                         ) : (
                           <>
diff --git a/src/components/comp-485.tsx b/src/components/comp-485.tsx
index caabb82..32865f8 100644
--- a/src/components/comp-485.tsx
+++ b/src/components/comp-485.tsx
@@ -720,7 +720,7 @@ export default function Component() {
   )
 }
 
-function RowActions({ row }: { row: Row<Item> }) {
+function RowActions({  }: { row?: Row<Item> }) {
   return (
     <DropdownMenu>
       <DropdownMenuTrigger asChild>
diff --git a/src/components/shared/MarathonRoutes/RouteMap.tsx b/src/components/shared/MarathonRoutes/RouteMap.tsx
index 73a7180..a5da638 100644
--- a/src/components/shared/MarathonRoutes/RouteMap.tsx
+++ b/src/components/shared/MarathonRoutes/RouteMap.tsx
@@ -7,7 +7,7 @@ interface RouteMapProps {
     id: string;
     name: string;
     distance: number;
-    terrain: string;
+    // terrain: string;
     // Add more fields as needed based on your route data structure
   };
   className?: string;
diff --git a/src/components/shared/MarathonRoutes/RouteSelector.tsx b/src/components/shared/MarathonRoutes/RouteSelector.tsx
index 42d6848..00c42ef 100644
--- a/src/components/shared/MarathonRoutes/RouteSelector.tsx
+++ b/src/components/shared/MarathonRoutes/RouteSelector.tsx
@@ -5,7 +5,7 @@ import { cn } from "@/lib/utils";
 import { Badge } from "@/components/ui/badge";
 import Image from "next/image";
 
-export interface Route {
+export interface RouteI {
   id: string;
   distance: number;
   label: string;
@@ -16,7 +16,7 @@ export interface Route {
 }
 
 interface RouteSelectorProps {
-  routes: Route[];
+  routes: RouteI[];
   selectedRoute: string;
   onRouteSelect: (routeId: string) => void;
   className?: string;
diff --git a/src/lib/api/interceptor.ts b/src/lib/api/interceptor.ts
index 8371b32..0eea3af 100644
--- a/src/lib/api/interceptor.ts
+++ b/src/lib/api/interceptor.ts
@@ -64,12 +64,12 @@ export class ApiInterceptors {
     axios.interceptors.response.use(
       (response: AxiosResponse) => response,
       async (error: AxiosError) => {
-        console.log('API Error:', error);
-        if (error.response?.status === 401) {
+      
+        if (error.response?.status === 402) {
           this.setAuthToken(null);
           if (typeof window !== 'undefined') {
             localStorage.removeItem('auth_token');
-            window.location.href = '/login';
+            window.location.href = '/auth';
           }
         }
 
diff --git a/src/providers/auth.provider.tsx b/src/providers/auth.provider.tsx
index d27bd4e..a690b04 100644
--- a/src/providers/auth.provider.tsx
+++ b/src/providers/auth.provider.tsx
@@ -15,7 +15,8 @@ import { errorMessage, successMessage } from "@/utils/notification";
 export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
   children,
 }) => {
-  const [user, setUser] = useState<UserI | null>(null);
+  const [user, setUser] = useState<UserI | null >(null);
+  const [error,setError] = useState("")
   const [token, setToken] = useState<string | null>(null);
   const [isLoading, setIsLoading] = useState(true);
   const router = useRouter();
@@ -31,14 +32,16 @@ export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
     //   const storedUser = authService.getStoredUser();
       if (storedToken) {
         setToken(storedToken);
-        console.log("initializeAuth - storedToken:", storedToken,);
+
         authService.setAuthToken(storedToken);
 
         // Optionally verify token by fetching fresh user data
         try {
-          const freshUser = await authService.getProfile();
+          const freshUserResponse = await authService.getProfile();
+          // Extract user data from response.data if it exists
+          const freshUser = freshUserResponse?.data || freshUserResponse;
          
-          setUser(freshUser);
+          setUser(freshUser as UserI);
           localStorage.setItem("user", JSON.stringify(freshUser));
         } catch (error) {
           // Token might be expired, clear auth data
@@ -54,6 +57,21 @@ export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
       setIsLoading(false);
     }
   };
+  const getProfile =async ()=>{
+    try {
+        const freshUserResponse = await authService.getProfile();
+        
+        const freshUser = freshUserResponse?.data || freshUserResponse;
+       
+        setUser(freshUser as UserI);
+        localStorage.setItem("user", JSON.stringify(freshUser));
+      } catch (error) {
+        // Token might be expired, clear auth data
+        // await logout();
+
+       console.log("Initialization of auth failed:", error);
+      }
+  }
 
   const login = async (data: LoginDataI): Promise<void> => {
     try {
@@ -74,7 +92,10 @@ export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
         router.push("/dashboard");
       }
     } catch (error: unknown) {
-      errorMessage(error.message || "Login failed");
+      const message = error instanceof Error ? error.message : "Login failed";
+    
+      setError(message)
+      errorMessage(message);
       throw error;
     } finally {
       setIsLoading(false);
@@ -126,11 +147,13 @@ export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
     }
   };
 
-  const refreshUser = async (): Promise<void> => {
+  const refreshUser = async () => {
     try {
       if (token) {
-        const freshUser = await authService.getProfile();
-        setUser(freshUser);
+        const freshUserResponse = await authService.getProfile();
+        // Extract user data from response.data if it exists
+        const freshUser = freshUserResponse?.data || freshUserResponse;
+        setUser(freshUser as UserI);
         localStorage.setItem("user", JSON.stringify(freshUser));
       }
     } catch (error) {
@@ -144,8 +167,10 @@ export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
     token,
     isAuthenticated: !!token,
     isLoading,
+    error,
     login,
     register,
+getProfile,
     logout,
     changePassword,
     refreshUser,
diff --git a/src/services/auth.service.ts b/src/services/auth.service.ts
index d3f949f..446c8b8 100644
--- a/src/services/auth.service.ts
+++ b/src/services/auth.service.ts
@@ -88,10 +88,10 @@ class AuthService extends BaseApiService {
     }
   }
 
-  async getProfile(): Promise<UserI> {
+  async getProfile() {
     try {
       const response = await this.get(this.AUTH_ENDPOINTS.PROFILE);
-      return response as UserI;
+      return response;
     } catch (error) {
       console.error("Get profile error:", error);
       throw error;
@@ -101,7 +101,7 @@ class AuthService extends BaseApiService {
   async refreshToken(): Promise<string> {
     try {
       const response = await this.post(this.AUTH_ENDPOINTS.REFRESH, {});
-      const newToken = response.data.token;
+      const newToken = response.id_token;
 
       if (newToken) {
         this.setAuthToken(newToken);
diff --git a/src/services/user.service.ts b/src/services/user.service.ts
index 40221da..7540406 100644
--- a/src/services/user.service.ts
+++ b/src/services/user.service.ts
@@ -1,12 +1,12 @@
 import { BaseApiService } from "@/lib/api/base-api";
 import { ApiResponseI } from "@/types/api";
-import { CreateUserDataI, UserI } from "@/types/user";
+import { CreateUserDataI, UpdateUserDataI, UserI } from "@/types/user";
 
 class UserService extends BaseApiService {
   private readonly endpoint = "register";
 
   async getUsers(
-    filters?: any
+    filters?: {sortBy?: string; order?: 'asc' | 'desc'; page?: number; limit?: number; search?: string}
   ): Promise<ApiResponseI<{ users: UserI[]; total: number; pages: number }>> {
     try {
       return this.get(`${this.endpoint}`, { params: filters });
@@ -34,7 +34,7 @@ class UserService extends BaseApiService {
     }
   }
 
-  async updateUser(id: number, userData: any): Promise<ApiResponseI<UserI>> {
+  async updateUser(id: number, userData: UpdateUserDataI): Promise<ApiResponseI<UserI>> {
     try {
       return this.put(
         `${this.endpoint}/${id}`,
@@ -47,7 +47,7 @@ class UserService extends BaseApiService {
     }
   }
 
-  async deleteUser(id: number): Promise<ApiResponseI<any> | false> {
+  async deleteUser(id: number) {
     try {
       return this.delete(
         `${this.endpoint}/${id}`,
diff --git a/src/types/auth.ts b/src/types/auth.ts
index ee42fb8..96cc8c9 100644
--- a/src/types/auth.ts
+++ b/src/types/auth.ts
@@ -10,9 +10,9 @@ export interface RegisterDataI {
   lastName: string;
   email: string;
   password: string;
-  confirmPassword: string;
+  // confirmPassword: string;
   phone?: string;
-  termsAccepted: boolean;
+  // termsAccepted: boolean;
 }
 
 export interface ChangePasswordDataI {
@@ -47,6 +47,8 @@ export interface AuthContextI {
   token: string | null;
   isAuthenticated: boolean;
   isLoading: boolean;
+  error:string
+  getProfile:() => Promise<void>;
   login: (data: LoginDataI) => Promise<void>;
   register: (data: RegisterDataI) => Promise<void>;
   logout: () => Promise<void>;
diff --git a/src/types/user.ts b/src/types/user.ts
index 2446487..bd9fa2c 100644
--- a/src/types/user.ts
+++ b/src/types/user.ts
@@ -16,6 +16,15 @@ export interface CreateUserDataI {
   password: string;
 }
 
+
+export interface UpdateUserDataI {
+  login?: string;
+  firstName?: string;
+  lastName?: string;
+  email?: string;
+  password?: string;
+}
+
 //   export interface UpdateUserData {
 //     name?: string;
 //     email?: string;
