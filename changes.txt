diff --git a/package-lock.json b/package-lock.json
index 87899bc..373332e 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -21,6 +21,7 @@
         "@radix-ui/react-navigation-menu": "^1.2.13",
         "@radix-ui/react-popover": "^1.1.14",
         "@radix-ui/react-radio-group": "^1.3.7",
+        "@radix-ui/react-scroll-area": "^1.2.10",
         "@radix-ui/react-select": "^2.2.5",
         "@radix-ui/react-separator": "^1.1.7",
         "@radix-ui/react-slider": "^1.3.5",
@@ -2079,6 +2080,64 @@
         }
       }
     },
+    "node_modules/@radix-ui/react-scroll-area": {
+      "version": "1.2.10",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-scroll-area/-/react-scroll-area-1.2.10.tgz",
+      "integrity": "sha512-tAXIa1g3sM5CGpVT0uIbUx/U3Gs5N8T52IICuCtObaos1S8fzsrPXG5WObkQN3S6NVl6wKgPhAIiBGbWnvc97A==",
+      "dependencies": {
+        "@radix-ui/number": "1.1.1",
+        "@radix-ui/primitive": "1.1.3",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-direction": "1.1.1",
+        "@radix-ui/react-presence": "1.1.5",
+        "@radix-ui/react-primitive": "2.1.3",
+        "@radix-ui/react-use-callback-ref": "1.1.1",
+        "@radix-ui/react-use-layout-effect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-scroll-area/node_modules/@radix-ui/primitive": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/@radix-ui/primitive/-/primitive-1.1.3.tgz",
+      "integrity": "sha512-JTF99U/6XIjCBo0wqkU5sK10glYe27MRRsfwoiq5zzOEZLHU3A3KCMa5X/azekYRCJ0HlwI0crAXS/5dEHTzDg=="
+    },
+    "node_modules/@radix-ui/react-scroll-area/node_modules/@radix-ui/react-presence": {
+      "version": "1.1.5",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-presence/-/react-presence-1.1.5.tgz",
+      "integrity": "sha512-/jfEwNDdQVBCNvjkGit4h6pMOzq8bHkopq458dPt2lMjx+eBQUohZNG9A7DtO/O5ukSbxuaNGXMjHicgwy6rQQ==",
+      "dependencies": {
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-use-layout-effect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
     "node_modules/@radix-ui/react-select": {
       "version": "2.2.5",
       "resolved": "https://registry.npmjs.org/@radix-ui/react-select/-/react-select-2.2.5.tgz",
diff --git a/package.json b/package.json
index 7bdbaab..0bda844 100644
--- a/package.json
+++ b/package.json
@@ -23,6 +23,7 @@
     "@radix-ui/react-navigation-menu": "^1.2.13",
     "@radix-ui/react-popover": "^1.1.14",
     "@radix-ui/react-radio-group": "^1.3.7",
+    "@radix-ui/react-scroll-area": "^1.2.10",
     "@radix-ui/react-select": "^2.2.5",
     "@radix-ui/react-separator": "^1.1.7",
     "@radix-ui/react-slider": "^1.3.5",
diff --git a/src/Page-Sections/CMSDashboard/BlueprintPageSection.tsx b/src/Page-Sections/CMSDashboard/BlueprintPageSection.tsx
index 4bcd3af..0443b72 100644
--- a/src/Page-Sections/CMSDashboard/BlueprintPageSection.tsx
+++ b/src/Page-Sections/CMSDashboard/BlueprintPageSection.tsx
@@ -1,37 +1,193 @@
 import { useBlueprint } from "@/hooks/CMS/useBlueprint";
 import { useEffect } from "react";
-import BlueprintCard from "./Parts/BlueprintCard";
 import type { BlueprintContentI } from "@/types/cms/blueprint.interface";
-
+import {
+  Combine,
+  FileText,
+  Database,
+  Settings,
+  Layout,
+  Code,
+  Image,
+  Video,
+  Music,
+  Archive,
+  FolderSymlink,
+  Folder,
+} from "lucide-react";
+import { Link } from "react-router-dom";
+import BlueprintPageSkeletonLoader from "@/components/loader/BlueprintPageSkeletonLoader";
 
 function BlueprintPageSection() {
-  const { blueprints, findAllBlueprint } = useBlueprint();
- 
-
+  const { blueprints, findAllBlueprint, loading } = useBlueprint();
 
   useEffect(() => {
     findAllBlueprint();
   }, []);
 
+  // Function to get icon and formatted title based on type
+  const getTypeDetails = (type: string) => {
+    const normalizedType = type.toLowerCase();
+
+    switch (normalizedType) {
+      case "document":
+      case "doc":
+        return {
+          icon: FileText,
+          title: "Document Collection",
+          displayType: normalizedType,
+        };
+      case "database":
+      case "data":
+        return {
+          icon: Database,
+          title: "Database Collection",
+          displayType: normalizedType,
+        };
+      case "component":
+      case "ui":
+        return {
+          icon: Layout,
+          title: "Component Library",
+          displayType: normalizedType,
+        };
+      case "code":
+      case "script":
+        return {
+          icon: Code,
+          title: "Code Repository",
+          displayType: normalizedType,
+        };
+      case "image":
+      case "photo":
+        return {
+          icon: Image,
+          title: "Image Gallery",
+          displayType: normalizedType,
+        };
+      case "video":
+      case "media":
+        return {
+          icon: Video,
+          title: "Video Collection",
+          displayType: normalizedType,
+        };
+      case "audio":
+      case "music":
+        return {
+          icon: Music,
+          title: "Audio Library",
+          displayType: normalizedType,
+        };
+      case "archive":
+      case "backup":
+        return {
+          icon: Archive,
+          title: "Archive Collection",
+          displayType: normalizedType,
+        };
+      case "settings":
+      case "config":
+        return {
+          icon: Settings,
+          title: "Configuration",
+          displayType: normalizedType,
+        };
+      case "navigation":
+      case "navigate":
+        return {
+          icon: FolderSymlink,
+          title: "Navigation",
+          displayType: normalizedType,
+        };
+      case "collection":
+      case "pages":
+        return {
+          icon: Combine,
+          title: "Collection",
+          displayType: normalizedType,
+        };
+      default:
+        return {
+          icon: Folder,
+          title: "General Collection",
+          displayType: type,
+        };
+    }
+  };
+
+  // Group blueprints by type
+  const groupedBlueprints =
+    blueprints?.data?.content.reduce((acc, content: BlueprintContentI) => {
+      const type = content.type ?? "general";
+      if (!acc[type]) {
+        acc[type] = [];
+      }
+      acc[type].push(content);
+      return acc;
+    }, {} as Record<string, BlueprintContentI[]>) || {};
+
   return (
-    <div className="space-y-4">
-      <h1 className="text-2xl font-bold">Blueprint</h1>
-      {/* <div className="grid gap-6 xl:grid-cols-[1fr_minmax(280px,380px)] items-start w-full overflow-hidden"> */}
-      <div>
-        <div className="min-w-0 space-y-6">
-          <h2 className="text-lg font-semibold">You Blueprint</h2>
-          <div className="space-y-3">
-            {blueprints?.data?.content.map((content: BlueprintContentI) => (
-              <BlueprintCard key={content.reference} content={content} />
-            ))}
-            {blueprints?.data?.content.length === 0 && (
-              <p className="text-sm text-muted-foreground">
-                No collections yet.
-              </p>
-            )}
+    <div className="space-y-4 max-w-7xl mx-auto">
+      {loading ? (
+        <BlueprintPageSkeletonLoader />
+      ) : (
+        <>
+          <h1 className="text-2xl font-bold">Blueprint</h1>
+          <div>
+            <div className="min-w-0 space-y-6">
+              <h2 className="text-lg font-semibold">Your Blueprints</h2>
+
+              <div className="space-y-6">
+                {Object.entries(groupedBlueprints).map(
+                  ([type, blueprintsOfType]) => {
+                    const { icon: IconComponent, displayType } =
+                      getTypeDetails(type);
+
+                    return (
+                      <div key={type} className="space-y-3">
+                        <h1 className="font-semibold capitalize flex items-center gap-2">
+                          {displayType}
+                        </h1>
+
+                        <div className="space-y-2 border border-gray-300 rounded-lg ">
+                          {blueprintsOfType.map(
+                            (content: BlueprintContentI) => (
+                              <div
+                                key={content.reference}
+                                className=" text-gray-500 border-b last:border-0 border-gray-400"
+                              >
+                                <div className="flex items-center gap-2 p-4 justify-between">
+                                  <div className="flex items-center gap-2">
+                                    <IconComponent className="h-5 w-5" />
+                                    <Link
+                                      to={`${content.reference}`}
+                                      state={{ title: content.title }}
+                                      className="hover:text-nbc-dark-950 transition-colors hover:font-[500] capitalize"
+                                    >
+                                      {content.title}
+                                    </Link>
+                                  </div>
+                                </div>
+                              </div>
+                            )
+                          )}
+                        </div>
+                      </div>
+                    );
+                  }
+                )}
+
+                {Object.keys(groupedBlueprints).length === 0 && (
+                  <p className="text-sm text-muted-foreground">
+                    No collections yet.
+                  </p>
+                )}
+              </div>
+            </div>
           </div>
-        </div>
-      </div>
+        </>
+      )}
     </div>
   );
 }
diff --git a/src/Page-Sections/CMSDashboard/Parts/BlueprintCard.tsx b/src/Page-Sections/CMSDashboard/Parts/BlueprintCard.tsx
index 77de624..af903e1 100644
--- a/src/Page-Sections/CMSDashboard/Parts/BlueprintCard.tsx
+++ b/src/Page-Sections/CMSDashboard/Parts/BlueprintCard.tsx
@@ -283,6 +283,7 @@ function BlueprintCard({ content }: { content: BlueprintContentI }) {
                       <FieldRenderer
                         field={field}
                         value={values[field.handle]}
+                        disable={true}
                         onChange={(v) =>
                           setValues((s) => ({ ...s, [field.handle]: v }))
                         }
@@ -309,7 +310,7 @@ function BlueprintCard({ content }: { content: BlueprintContentI }) {
             </div>
           ))}
 
-        {localSchema?.sections && localSchema.sections.length > 0 && (
+        {/* {localSchema?.sections && localSchema.sections.length > 0 && (
           <Button
             onClick={saveEntry}
             className="w-full"
@@ -318,7 +319,7 @@ function BlueprintCard({ content }: { content: BlueprintContentI }) {
           >
             Add Entry
           </Button>
-        )}
+        )} */}
 
         {(!localSchema?.sections || localSchema.sections.length === 0) && (
           <div className="text-center py-12 text-muted-foreground bg-field-category rounded-lg border border-field-border">
@@ -327,9 +328,15 @@ function BlueprintCard({ content }: { content: BlueprintContentI }) {
           </div>
         )}
       </div>
-
+      <div
+        className="border border-dashed rounded-lg border-gray-300  hover:border-gray-400 transition-colors cursor-pointer text-gray-500 h-32 flex items-center justify-center gap-2 group"
+        onClick={() => setAddSectionOpen(true)}
+      >
+        <Plus className="w-6 h-6" />
+        <span className="text-md"> Add Section</span>
+      </div>
       {/* Entries Section */}
-      <div className="space-y-4">
+      {/* <div className="space-y-4">
         <h3 className="text-lg font-semibold text-foreground">
           Entries ({entries.length})
         </h3>
@@ -374,7 +381,7 @@ function BlueprintCard({ content }: { content: BlueprintContentI }) {
             </div>
           )}
         </div>
-      </div>
+      </div> */}
 
       {/* Settings Dialog */}
       <Dialog open={open} onOpenChange={setOpen}>
diff --git a/src/Page-Sections/Landing/FindBranchAtmsPageSection.tsx b/src/Page-Sections/Landing/FindBranchAtmsPageSection.tsx
index 4021e1a..d908ee3 100644
--- a/src/Page-Sections/Landing/FindBranchAtmsPageSection.tsx
+++ b/src/Page-Sections/Landing/FindBranchAtmsPageSection.tsx
@@ -1,9 +1,15 @@
-import DataTable from "@/components/reusable/data-table";
 import { useState } from "react";
-import type { TableColumn } from "@/types/table";
 import HeroSection from "@/components/reusable/HeroSection";
-import { CustomInput } from "@/components/ui/CustomInput";
-import Button from "@/components/ui/button";
+import LocatorSearchFilters from "@/components/sections/LocatorsSearchFilters";
+import LocationTable from "@/components/sections/LocationTable";
+import MapView from "@/components/sections/MapView";
+import type { Location, LocationSearchFilters } from "@/types/location";
+import {
+  categories,
+  districts,
+  regions,
+  sampleLocations,
+} from "@/data/sampleLocations";
 
 function FindBranchAtmsPageSection() {
   const slides = [
@@ -15,109 +21,62 @@ function FindBranchAtmsPageSection() {
       imageUrl: "/images/nbc.jpg",
     },
   ];
-  const [selectedRows, setSelectedRows] = useState<any[]>([]);
-  const [globalFilter, setGlobalFilter] = useState<string>("");
-  const data = [
-    {
-      id: "m5gr84i9",
-      category: "Insurance Application Submitted",
-      region: "Application for health insurance coverage",
-      district: "success",
-      distance: "npx-5566-uiin",
-      mapDirection: "ken99@example.com",
-    },
-    {
-      id: "3u1reuv4",
+  const [filteredLocations, setFilteredLocations] =
+    useState<Location[]>(sampleLocations);
+  const [selectedLocation, setSelectedLocation] = useState<Location | null>(
+    null
+  );
 
-      category: "Insurance Application Submitted",
-      region: "Application for auto insurance coverage",
-      district: "success",
-      distance: "npx-5566-uiin",
-      mapDirection: "Abe45@example.com",
-    },
-    {
-      id: "derv1ws0",
+  const handleSearch = (filters: LocationSearchFilters) => {
+    let filtered = sampleLocations;
 
-      category: "Insurance Application Submitted",
-      region: "Application for home insurance coverage",
-      district: "processing",
-      distance: "npx-5566-uiin",
-      mapDirection: "Monserrat44@example.com",
-    },
-    {
-      id: "5kma53ae",
+    if (filters.category && filters.category !== "all") {
+      filtered = filtered.filter(
+        (location) => location.category === filters.category
+      );
+    }
+    if (filters.region && filters.region !== "all") {
+      filtered = filtered.filter(
+        (location) => location.region === filters.region
+      );
+    }
+    if (filters.district && filters.district !== "all") {
+      filtered = filtered.filter(
+        (location) => location.district === filters.district
+      );
+    }
 
-      category: "Google",
-      region: "Google service transaction",
-      district: "success",
-      distance: "npx-5566-uiin",
-      mapDirection: "Silas22@example.com",
-    },
-    {
-      id: "bhqecj4p",
-      category: "Slack",
-      region: "Slack subscription payment",
-      district: "failed",
-      distance: "npx-5566-uiin",
-      mapDirection: "carmella@example.com",
-    },
-  ];
+    setFilteredLocations(filtered);
+    // toast({
+    //   title: "Search completed",
+    //   description: `Found ${filtered.length} location${
+    //     filtered.length !== 1 ? "s" : ""
+    //   } matching your criteria.`,
+    // });
+  };
 
-  const columns: TableColumn<any>[] = [
-    {
-      id: "category",
-      header: "Category",
-      accessorKey: "category",
-      cell: ({ row }: { row: any }) => (
-        <div className="flex flex-col">
-          <div className="font-medium">{row.getValue("category") || "-"}</div>
-          {/* <div className="text-xs text-muted-foreground">
-            {row.original.description || "No description available"}
-          </div> */}
-        </div>
-      ),
-    },
-    {
-      id: "region",
-      header: "region",
-      accessorKey: "region",
-      cell: ({ row }: { row: any }) => (
-        <div className="font-medium uppercase">
-          {row.getValue("region") || "-"}
-        </div>
-      ),
-    },
-    {
-      id: "district",
-      header: "district",
-      accessorKey: "district",
-      cell: ({ row }: { row: any }) => (
-        <div className="font-medium uppercase">
-          {row.getValue("district") || "-"}
-        </div>
-      ),
-    },
-    {
-      id: "distance",
-      header: "distance",
-      accessorKey: "distance",
-      cell: ({ row }: { row: any }) => (
-        <div className="font-medium uppercase">
-          {row.getValue("distance") || "-"}
-        </div>
-      ),
-    },
-    {
-      id: "mapDirection",
-      header: "mapDirection",
-      accessorKey: "mapDirection",
-      cell: ({ row }: { row: any }) => (
-        <div className="font-medium uppercase">
-          {row.getValue("mapDirection") || "-"}
-        </div>
-      ),
-    },
-  ];
+  const handleGetDirections = (location: Location) => {
+    setSelectedLocation(location);
+    // toast({
+    //   title: "Directions updated",
+    //   description: `Showing directions to ${location.category} in ${location.district}, ${location.region}`,
+    // });
+
+    // Scroll to map for better UX
+    const mapElement = document.getElementById("location-map");
+    if (mapElement) {
+      mapElement.scrollIntoView({ behavior: "smooth" });
+    }
+  };
+
+  const handleClearSearch = () => {
+    setFilteredLocations(sampleLocations);
+    setSelectedLocation(null);
+    // toast({
+    //   title: "Search cleared",
+    //   description: `Showing all ${sampleLocations.length} locations`,
+    // });
+  };
 
   return (
     <div>
@@ -132,31 +91,34 @@ function FindBranchAtmsPageSection() {
             banking services.
           </p>
         </div>
-        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
-          <CustomInput label="Category" placeholder="category" />
-          <CustomInput label="Region"  placeholder="Dar es Salaam"/>
-          <CustomInput label="District"  placeholder="Ubungo"/>
-          <Button variant="primary">Search</Button>
+
+        <div className="min-h-screen bg-background">
+          <div className="container mx-auto py-4 sm:py-6 lg:py-8 px-3 sm:px-4 lg:px-6 max-w-8xl">
+        
+
+            <div className="space-y-4 sm:space-y-6">
+              <LocatorSearchFilters
+                onSearch={handleSearch}
+                onClear={handleClearSearch}
+                categories={categories}
+                regions={regions}
+                districts={districts}
+              />
+
+              <LocationTable
+                locations={filteredLocations}
+                onGetDirections={handleGetDirections}
+              />
+
+              <div id="location-map">
+                <MapView
+                  selectedLocation={selectedLocation}
+                  allLocations={filteredLocations}
+                />
+              </div>
+            </div>
+          </div>
         </div>
-        <DataTable
-          data={data}
-          columns={columns}
-          displayMode="serial"
-          headerBgColor="bg-nbc-dark-950"
-          headerTextColor="text-white"
-          //   actions={actions}
-          searchableColumns={["email", "status"]}
-          searchPlaceholder="Search payments..."
-          enableRowSelection={true}
-          enableColumnVisibility={true}
-          globalFilter={globalFilter}
-          setGlobalFilter={setGlobalFilter}
-          enablePagination={true}
-          pageSize={10}
-          onRowSelectionChange={setSelectedRows}
-          emptyStateMessage="No payments found."
-          className="border-gray-300"
-        />
       </div>
     </div>
   );
diff --git a/src/Providers/blueprints.provider.tsx b/src/Providers/blueprints.provider.tsx
index 6a8371d..1ebb1e8 100644
--- a/src/Providers/blueprints.provider.tsx
+++ b/src/Providers/blueprints.provider.tsx
@@ -45,6 +45,7 @@ export const BlueprintProvider: React.FC<{ children: React.ReactNode }> = ({
     setLoading(true);
     hasFetched.current = true;
     await blueprintsServices.findAll(setBlueprints, queryString);
+    setLoading(false);
   }
 
   async function findBlueprintById(id: string) {
diff --git a/src/Routes/CMSRoutes.tsx b/src/Routes/CMSRoutes.tsx
index d2d13dd..f0669e5 100644
--- a/src/Routes/CMSRoutes.tsx
+++ b/src/Routes/CMSRoutes.tsx
@@ -15,6 +15,11 @@ const CMSLogin = lazy(() => import("@/Pages/Dashboard/CMS/CMSPages/CMSLogin"));
 const Blueprint = lazy(
   () => import("@/Pages/Dashboard/CMS/CMSPages/Blueprint")
 );
+
+const SingleBlueprint = lazy(
+  () => import("@/Pages/Dashboard/CMS/CMSPages/SingleBlueprint")
+);
+
 const Collection = lazy(
   () => import("@/Pages/Dashboard/CMS/CMSPages/Collection")
 );
@@ -57,7 +62,11 @@ const cmsRoutes = (
       }
     >
       <Route index element={<CMSDashboard />} />
-      <Route path="blue-prints" element={<Blueprint />} />
+      <Route path="blue-prints">
+        <Route index element={<Blueprint />} />
+        <Route path=":id" element={<SingleBlueprint />} />
+      </Route>
+
       <Route path="collections">
         <Route index element={<Collection />} />
         <Route path=":id" element={<SingleCollection />} />
diff --git a/src/components/cms/FieldRenderer.tsx b/src/components/cms/FieldRenderer.tsx
index eaf145b..53e6d45 100644
--- a/src/components/cms/FieldRenderer.tsx
+++ b/src/components/cms/FieldRenderer.tsx
@@ -10,12 +10,12 @@ import { CustomSelect } from "../ui/CustomSelect";
 interface RendererProps {
   field: BlueprintFieldTypeI | FieldDefinition;
   value: any;
+  disable?: boolean;
   onChange: (v: any) => void;
 }
 
 // Helper function to normalize field data
 function normalizeField(field: BlueprintFieldTypeI | FieldDefinition) {
-
   // Check if it's a BlueprintFieldType (new API structure)
   if ("displayName" in field && "config" in field) {
     const blueprintField = field as BlueprintFieldTypeI;
@@ -45,7 +45,12 @@ function normalizeField(field: BlueprintFieldTypeI | FieldDefinition) {
   };
 }
 
-export function FieldRenderer({ field, value, onChange }: RendererProps) {
+export function FieldRenderer({
+  field,
+  value,
+  onChange,
+  disable = false,
+}: RendererProps) {
   const normalizedField = normalizeField(field);
 
   const common = (
@@ -81,6 +86,7 @@ export function FieldRenderer({ field, value, onChange }: RendererProps) {
             placeholder={placeholder}
             value={value ?? ""}
             onChange={(e) => onChange(e.target.value)}
+            disabled={disable}
           />
         </div>
       );
@@ -95,6 +101,7 @@ export function FieldRenderer({ field, value, onChange }: RendererProps) {
             value={value ?? ""}
             onChange={(e) => onChange(e.target.value)}
             rows={normalizedField.config?.rows || 4}
+            disabled={disable}
           />
         </div>
       );
@@ -125,6 +132,7 @@ export function FieldRenderer({ field, value, onChange }: RendererProps) {
             min={normalizedField.config?.min}
             max={normalizedField.config?.max}
             step={normalizedField.config?.step}
+            disabled={disable}
           />
         </div>
       );
@@ -150,6 +158,7 @@ export function FieldRenderer({ field, value, onChange }: RendererProps) {
             id={normalizedField.id}
             checked={!!value}
             onCheckedChange={(v: any) => onChange(v)}
+            disabled={disable}
           />
           <Label htmlFor={normalizedField.id}>{normalizedField.label}</Label>
         </div>
@@ -159,7 +168,6 @@ export function FieldRenderer({ field, value, onChange }: RendererProps) {
       // case "select":
       return (
         <div className="space-y-1">
-    
           <CustomSelect
             options={normalizedField.options || []}
             onValueChange={(v) => onChange(v)}
@@ -168,6 +176,7 @@ export function FieldRenderer({ field, value, onChange }: RendererProps) {
             placeholder={"Select Option"}
             required={normalizedField.required}
             className="w-full"
+            disabled={disable}
           />
 
           {/* <Select value={value ?? ""} onValueChange={(v) => onChange(v)}>
@@ -194,6 +203,7 @@ export function FieldRenderer({ field, value, onChange }: RendererProps) {
             type="date"
             value={value ?? ""}
             onChange={(e) => onChange(e.target.value)}
+            disabled={disable}
           />
         </div>
       );
@@ -208,6 +218,7 @@ export function FieldRenderer({ field, value, onChange }: RendererProps) {
             placeholder="https://example.com"
             value={value ?? ""}
             onChange={(e) => onChange(e.target.value)}
+            disabled={disable}
           />
         </div>
       );
@@ -225,20 +236,21 @@ export function FieldRenderer({ field, value, onChange }: RendererProps) {
           />
         </div>
       );
-      case "NAVIGATION":
-        return (
-          <div className="space-y-1">
-            <CustomInput
-              label={normalizedField.label}
-              description={normalizedField.instructions}
-              required={normalizedField.required}
-              id={normalizedField.id}
-              placeholder={placeholder}
-              value={value ?? ""}
-              onChange={(e) => onChange(e.target.value)}
-            />
-          </div>
-        );
+    case "NAVIGATION":
+      return (
+        <div className="space-y-1">
+          <CustomInput
+            label={normalizedField.label}
+            description={normalizedField.instructions}
+            required={normalizedField.required}
+            id={normalizedField.id}
+            placeholder={placeholder}
+            value={value ?? ""}
+            onChange={(e) => onChange(e.target.value)}
+            disabled={disable}
+          />
+        </div>
+      );
 
     default:
       return (
diff --git a/src/components/ui/button.tsx b/src/components/ui/button.tsx
index 74072a9..a8d21a5 100644
--- a/src/components/ui/button.tsx
+++ b/src/components/ui/button.tsx
@@ -17,8 +17,7 @@ type ButtonProps = {
     | "iconOutline"
     | "iconRounded"
     | "dropdown"
-    | "destructive" 
-    ;
+    | "destructive";
   size?: "xs" | "sm" | "md" | "lg" | "xl";
   type?: "button" | "submit" | "reset";
   disabled?: boolean;
@@ -28,6 +27,7 @@ type ButtonProps = {
   children?: React.ReactNode;
   onClick?: React.MouseEventHandler<HTMLButtonElement>;
   className?: string;
+  asChild?: boolean; // Add this to the type definition
   [key: string]: unknown;
 };
 
@@ -42,6 +42,7 @@ const Button = ({
   children,
   onClick,
   className = "",
+  asChild = false, // Extract asChild prop
   ...props
 }: ButtonProps) => {
   // Base styles
@@ -123,6 +124,17 @@ const Button = ({
   const isLightOutline = variant === "lightOutline";
   const isIconOutline = variant === "iconOutline";
 
+  // If asChild is true, return just the styled content without the button wrapper
+  // This allows the parent to control what element is rendered
+  if (asChild) {
+    const child = React.Children.only(children) as React.ReactElement<any>;
+    return React.cloneElement(child, {
+      ...child.props,
+      ...props,
+      className: `${buttonClasses} ${child.props.className || ''}`,
+    });
+  }
+
   return (
     <button
       type={type}
@@ -211,4 +223,4 @@ const Button = ({
   );
 };
 
-export default Button;
+export default Button;
\ No newline at end of file
diff --git a/src/data/cmsNavigationData.ts b/src/data/cmsNavigationData.ts
index 8cabdb8..b5dcf1c 100644
--- a/src/data/cmsNavigationData.ts
+++ b/src/data/cmsNavigationData.ts
@@ -1,5 +1,5 @@
 import type { NavigationItem } from "@/components/cms/Sidebar";
-import { Edit, FileText, Globe, Images, LayoutDashboard, Navigation } from "lucide-react";
+import { Combine, Edit, FileText, FolderSymlink, Images, LayoutDashboard,  } from "lucide-react";
 
 export const cmsNavigationData: NavigationItem[] = [
   {
@@ -28,12 +28,12 @@ export const cmsNavigationData: NavigationItem[] = [
   // },
   {
     label: "Navigation",
-    icon: Navigation,
+    icon: FolderSymlink,
     href: "/cms/navigation",
   },
   {
     label: "Collections",
-    icon: Globe,
+    icon: Combine,
     href: "/cms/collections",
   },
   {
diff --git a/src/types/cms/blueprint.interface.ts b/src/types/cms/blueprint.interface.ts
index 75331f3..904d74b 100644
--- a/src/types/cms/blueprint.interface.ts
+++ b/src/types/cms/blueprint.interface.ts
@@ -34,7 +34,7 @@ export interface BlueprintFieldTypeI {
 }
 
 export interface BlueprintSectionI {
-  id?: string;
+  id: string;
   handle?: string;
   displayName?: string;
   description?: string;
